TITLE: Define and Validate Data with Zod Schema
DESCRIPTION: This snippet demonstrates how to define a Zod object schema for data validation. It shows parsing untrusted input to obtain a type-safe result, enabling confident use of the validated data in TypeScript applications.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/index.mdx#_snippet_0 LANGUAGE: typescript
CODE:
```
import { z } from "zod/v4"; const User = z.object({ name: z.string(),
}); // some untrusted data...
const input = { /* stuff */ }; // the parsed result is validated and type safe!
const data = User.parse(input); // so you can use it with confidence :)
console.log(data.name);
``` ---------------------------------------- TITLE: Define a Zod Object Schema
DESCRIPTION: Illustrates the fundamental step of defining a Zod schema, specifically an object schema named 'Player'. This schema specifies that a player object must have a string 'username' and a number 'xp'.
SOURCE: https://github.com/colinhacks/zod/blob/main/README.md#_snippet_2 LANGUAGE: typescript
CODE:
```
import { z } from "zod/v4"; const Player = z.object({ username: z.string(), xp: z.number()
});
``` ---------------------------------------- TITLE: Parsing Data Synchronously with Zod .parse (TypeScript)
DESCRIPTION: Demonstrates how to use the .parse() method on a Zod schema. It shows successful parsing for valid data and how it throws an error for invalid data. The method returns the parsed value if successful.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/parsing.mdx#_snippet_0 LANGUAGE: TypeScript
CODE:
```
const stringSchema = z.string(); stringSchema.parse("fish"); // => returns "fish"
stringSchema.parse(12); // throws error
``` ---------------------------------------- TITLE: Define Optional Zod Schemas
DESCRIPTION: Demonstrates how to make a Zod schema optional using `z.optional()` or the `.optional()` method, showing its effect on inferred types and how to unwrap the original schema.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_39 LANGUAGE: typescript
CODE:
```
const schema = z.optional(z.string()); schema.parse(undefined); // => returns undefined
type A = z.infer<typeof schema>; // string | undefined
``` LANGUAGE: typescript
CODE:
```
const user = z.object({ username: z.string().optional(),
});
type C = z.infer<typeof user>; // { username?: string | undefined };
``` LANGUAGE: typescript
CODE:
```
const stringSchema = z.string();
const optionalString = stringSchema.optional();
optionalString.unwrap() === stringSchema; // true
``` ---------------------------------------- TITLE: Infer Static Types from Zod Schemas using z.infer<>
DESCRIPTION: Shows how to extract the static TypeScript type inferred by Zod from a schema definition using the z.infer<> utility. This allows for type-safe usage of parsed data throughout your codebase.
SOURCE: https://github.com/colinhacks/zod/blob/main/README.md#_snippet_8 LANGUAGE: TypeScript
CODE:
```
import { z } from 'zod'; const Player = z.object({ username: z.string(), xp: z.number()
}); // extract the inferred type
type Player = z.infer<typeof Player>; // use it in your code
const player: Player = { username: "billie", xp: 100 };
``` ---------------------------------------- TITLE: Handling Zod .safeParse Results with Discriminated Union (TypeScript)
DESCRIPTION: Demonstrates how to effectively handle the result object returned by .safeParse(). It shows using the success property to check the validation outcome and access either the data or the error property based on the result.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/parsing.mdx#_snippet_3 LANGUAGE: TypeScript
CODE:
```
const result = stringSchema.safeParse("billie");
if (!result.success) { // handle error then return result.error;
} else { // do something result.data;
}
``` ---------------------------------------- TITLE: Define a Zod object schema for data validation
DESCRIPTION: Before processing data, you must define a schema. This example demonstrates creating a simple object schema for a 'Player' with username (string) and xp (number) properties using Zod.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/basics.mdx#_snippet_0 LANGUAGE: typescript
CODE:
```
import { z } from "zod/v4"; const Player = z.object({ username: z.string(), xp: z.number()
});
``` LANGUAGE: typescript
CODE:
```
import { z } from "zod/v4-mini" const Player = z.object({ username: z.string(), xp: z.number()
});
``` ---------------------------------------- TITLE: Define Zod Primitive Type Schemas
DESCRIPTION: Illustrates how to define basic primitive type schemas in Zod, such as string, number, bigint, boolean, symbol, undefined, and null, for fundamental data validation.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_0 LANGUAGE: ts
CODE:
```
import { z } from "zod/v4"; // primitive types
z.string();
z.number();
z.bigint();
z.boolean();
z.symbol();
z.undefined();
z.null();
``` ---------------------------------------- TITLE: Install Zod via Package Managers
DESCRIPTION: This snippet provides commands to install the Zod library using various package managers like npm, Deno, Yarn, Bun, and pnpm. It covers both stable and canary versions for development.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_1 LANGUAGE: sh
CODE:
```
npm install zod # npm
deno add npm:zod # deno
yarn add zod # yarn
bun add zod # bun
pnpm add zod # pnpm
``` LANGUAGE: sh
CODE:
```
npm install zod@canary # npm
deno add npm:zod@canary # deno
yarn add zod@canary # yarn
bun add zod@canary # bun
pnpm add zod@canary # pnpm
``` ---------------------------------------- TITLE: Infer Static Types from Zod Schemas with z.infer<>
DESCRIPTION: Explains how to extract the static type inferred by Zod from a schema definition using the `z.infer<>` utility. This allows developers to use the schema's type directly in their TypeScript code for strong typing.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/zod/README.md#_snippet_8 LANGUAGE: TypeScript
CODE:
```
const Player = z.object({ username: z.string(), xp: z.number(),
}); // extract the inferred type
type Player = z.infer<typeof Player>; // use it in your code
const player: Player = { username: "billie", xp: 100 };
``` ---------------------------------------- TITLE: Define and Parse Zod Object Schema in TypeScript
DESCRIPTION: This snippet demonstrates how to define a basic Zod object schema for user data and then parse untrusted input. It shows how Zod validates the input and infers static types, allowing safe access to parsed data.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/zod/README.md#_snippet_0 LANGUAGE: typescript
CODE:
```
import { z } from "zod/v4"; const User = z.object({ name: z.string(),
}); // some untrusted data...
const input = { /* stuff */
}; // the parsed result is validated and type safe!
const data = User.parse(input); // so you can use it with confidence :)
console.log(data.name);
``` ---------------------------------------- TITLE: Safely Parse Zod Schemas with safeParse()
DESCRIPTION: Illustrates using the `.safeParse()` method to avoid `try/catch` blocks. This method returns a discriminated union result object, allowing convenient handling of either successfully parsed data or a `ZodError` instance.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/zod/README.md#_snippet_6 LANGUAGE: TypeScript
CODE:
```
const result = Player.safeParse({ username: 42, xp: "100" });
if (!result.success) { result.error; // ZodError instance
} else { result.data; // { username: string; xp: number }
}
``` ---------------------------------------- TITLE: Configure TypeScript Strict Mode for Zod
DESCRIPTION: This snippet shows the required TypeScript compiler option `strict: true` in `tsconfig.json`. Enabling strict mode is a best practice for all TypeScript projects and is necessary for Zod.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_0 LANGUAGE: ts
CODE:
```
// tsconfig.json
{ // ... "compilerOptions": { // ... "strict": true }
}
``` ---------------------------------------- TITLE: Basic Zod Schema Definition and Parsing
DESCRIPTION: Demonstrates how to define a basic Zod object schema for a 'User' and parse untrusted input data. The parsed result is strongly typed and validated, allowing confident use of the data.
SOURCE: https://github.com/colinhacks/zod/blob/main/README.md#_snippet_0 LANGUAGE: typescript
CODE:
```
import { z } from "zod/v4"; const User = z.object({ name: z.string()
}); // some untrusted data...
const input = { /* stuff */
}; // the parsed result is validated and type safe!
const data = User.parse(input); // so you can use it with confidence :)
console.log(data.name);
``` ---------------------------------------- TITLE: Install Zod Package
DESCRIPTION: Commands to install the Zod library using various JavaScript package managers. This includes npm, Deno, Yarn, Bun, and pnpm, providing flexibility for different project setups.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/index.mdx#_snippet_1 LANGUAGE: shell
CODE:
```
npm install zod # npm
deno add npm:zod # deno
yarn add zod # yarn
bun add zod # bun
pnpm add zod # pnpm
``` ---------------------------------------- TITLE: Defining a Basic Object Schema with Zod v4 (TypeScript)
DESCRIPTION: This snippet shows how to import the 'z' object from 'zod/v4' and define a basic object schema using 'z.object'. It demonstrates defining properties with specific types and constraints like string, number (integer, positive), and email.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/zod.mdx#_snippet_0 LANGUAGE: TypeScript
CODE:
```
import { z } from "zod/v4"; const schema = z.object({ name: z.string(), age: z.number().int().positive(), email: z.string().email(),
});
``` ---------------------------------------- TITLE: Define and Infer Zod Object Schemas
DESCRIPTION: This snippet illustrates how to create an object schema with Zod, defining properties and their types. It also demonstrates how to extract the TypeScript inferred type from the Zod schema using `z.infer`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_3 LANGUAGE: ts
CODE:
```
import { z } from "zod"; const User = z.object({ username: z.string()
}); User.parse({ username: "Ludwig" }); // extract the inferred type
type User = z.infer<typeof User>;
// { username: string }
``` ---------------------------------------- TITLE: Safely Parsing Data Synchronously with Zod .safeParse (TypeScript)
DESCRIPTION: Illustrates the .safeParse() method, which does not throw errors on validation failure. Instead, it returns an object indicating success or failure, containing either the parsed data or a ZodError instance. Examples show results for both valid and invalid input.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/parsing.mdx#_snippet_2 LANGUAGE: TypeScript
CODE:
```
stringSchema.safeParse(12);
// => { success: false; error: ZodError } stringSchema.safeParse("billie");
// => { success: true; data: 'billie' }
``` ---------------------------------------- TITLE: Inspecting Zod validation error issues with safeParse
DESCRIPTION: This snippet demonstrates how to use `safeParse` to handle validation errors in both Zod and Zod Mini. It shows how to access the `error.issues` array, which contains structured metadata about the validation failures, including the `code`, `path`, and `message`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/error-customization.mdx#_snippet_0 LANGUAGE: ts
CODE:
```
import { z } from "zod/v4"; const result = z.string().safeParse(12); // { success: false, error: ZodError }
result.error.issues;
// [
// {
// expected: 'string',
// code: 'invalid_type',
// path: [],
// message: 'Invalid input: expected string, received number'
// }
// ]
``` LANGUAGE: ts
CODE:
```
import { z } from "zod/v4-mini"; const result = z.string().safeParse(12); // { success: false, error: z.core.$ZodError }
result.error.issues;
// [
// {
// expected: 'string',
// code: 'invalid_type',
// path: [],
// message: 'Invalid input'
// }
// ]
``` ---------------------------------------- TITLE: Safely parse data with Zod's .safeParse() method
DESCRIPTION: To avoid a `try/catch` block, use the `.safeParse()` method. It returns a discriminated union indicating success or failure, allowing convenient handling of both cases without throwing an error.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/basics.mdx#_snippet_4 LANGUAGE: typescript
CODE:
```
const result = Player.safeParse({ username: 42, xp: "100" });
if (!result.success) { result.error; // ZodError instance
} else { result.data; // { username: string; xp: number }
}
``` ---------------------------------------- TITLE: Parse data synchronously with Zod's .parse() method
DESCRIPTION: Validate input data against a Zod schema using the `.parse()` method. If valid, Zod returns a strongly-typed deep clone of the input. This method throws a `ZodError` on validation failure.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/basics.mdx#_snippet_1 LANGUAGE: typescript
CODE:
```
Player.parse({ username: "billie", xp: 100 }); // => returns { username: "billie", xp: 100 }
``` ---------------------------------------- TITLE: Synchronous Data Parsing with Zod
DESCRIPTION: Shows how to use the `.parse()` method to validate an input against a Zod schema. If the input is valid according to the schema, Zod returns a strongly-typed deep clone of the input data.
SOURCE: https://github.com/colinhacks/zod/blob/main/README.md#_snippet_3 LANGUAGE: typescript
CODE:
```
Player.parse({ username: "billie", xp: 100 });
// => returns { username: "billie", xp: 100 }
``` ---------------------------------------- TITLE: Zod refine Method for Custom Validation
DESCRIPTION: The .refine method allows defining custom validation logic on any Zod schema. It takes a validator function and optional parameters to customize error messages and paths. Refinement functions should return a falsy value to signal failure and can be asynchronous.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_91 LANGUAGE: APIDOC
CODE:
```
.refine(validator: (data:T)=>any, params?: RefineParams)
``` LANGUAGE: TypeScript
CODE:
```
const myString = z.string().refine((val) => val.length <= 255, { message: "String can't be more than 255 characters"
});
``` LANGUAGE: APIDOC
CODE:
```
type RefineParams = { message?: string; path?: (string | number)[]; params?: object;
}
``` LANGUAGE: TypeScript
CODE:
```
const longString = z.string().refine( (val) => val.length > 10, (val) => ({ message: `${val} is not more than 10 characters` })
);
``` LANGUAGE: TypeScript
CODE:
```
const passwordForm = z .object({ password: z.string(), confirm: z.string() }) .refine((data) => data.password === data.confirm, { message: "Passwords don't match", path: ["confirm"] }); passwordForm.parse({ password: "asdf", confirm: "qwer" });
``` LANGUAGE: json
CODE:
```
{ "issues": [{ "code": "custom", "path": [ "confirm" ], "message": "Passwords don't match" }]
}
``` LANGUAGE: TypeScript
CODE:
```
const userId = z.string().refine(async (id) => { // verify that ID exists in database return true;
});
``` LANGUAGE: TypeScript
CODE:
```
z.string() .transform((val) => val.length) .refine((val) => val > 25);
``` ---------------------------------------- TITLE: Create and Parse Zod String Schemas
DESCRIPTION: This example demonstrates how to define a basic string schema using Zod. It shows both `parse()` for strict validation (throws on error) and `safeParse()` for non-throwing validation, returning a result object.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_2 LANGUAGE: ts
CODE:
```
import { z } from "zod"; // creating a schema for strings
const mySchema = z.string(); // parsing
mySchema.parse("tuna"); // => "tuna"
mySchema.parse(12); // => throws ZodError // "safe" parsing (doesn't throw error if validation fails)
mySchema.safeParse("tuna"); // => { success: true; data: "tuna" }
mySchema.safeParse(12); // => { success: false; error: ZodError }
``` ---------------------------------------- TITLE: Install Zod via npm
DESCRIPTION: Provides the command-line instruction for installing the Zod library using the npm package manager, a common method for adding JavaScript packages to a project.
SOURCE: https://github.com/colinhacks/zod/blob/main/README.md#_snippet_1 LANGUAGE: shell
CODE:
```
npm install zod
``` ---------------------------------------- TITLE: Define Array Schema in Zod
DESCRIPTION: Demonstrates how to define a basic array schema where all elements are of a specified type, using both the `z.array()` constructor and the shorthand `.array()` method. Examples are provided for both standard Zod and Zod Mini.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_81 LANGUAGE: ts
CODE:
```
const stringArray = z.array(z.string()); // or z.string().array()
``` LANGUAGE: ts
CODE:
```
const stringArray = z.array(z.string());
``` ---------------------------------------- TITLE: TypeScript Discriminated Union Type Definition and Usage
DESCRIPTION: Illustrates a standard TypeScript discriminated union type `MyResult` and a function `handleResult` that demonstrates how TypeScript's type narrowing works based on the `status` discriminator key. This example shows the fundamental concept before introducing Zod's specific implementation.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_88 LANGUAGE: ts
CODE:
```
type MyResult = | { status: "success"; data: string } | { status: "failed"; error: string }; function handleResult(result: MyResult){ if(result.status === "success"){ result.data; // string } else { result.error; // string }
}
``` ---------------------------------------- TITLE: Apply Zod Number-Specific Validations
DESCRIPTION: Zod provides a comprehensive set of validation methods specifically for numbers. These include range checks (`gt`, `gte`, `lt`, `lte`), integer validation (`int`), sign checks (`positive`, `nonnegative`, `negative`, `nonpositive`), divisibility (`multipleOf`), and checks for finiteness (`finite`) and safe integer range (`safe`).
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_21 LANGUAGE: ts
CODE:
```
z.number().gt(5);
z.number().gte(5); // alias .min(5)
z.number().lt(5);
z.number().lte(5); // alias .max(5) z.number().int(); // value must be an integer z.number().positive(); // > 0
z.number().nonnegative(); // >= 0
z.number().negative(); // < 0
z.number().nonpositive(); // <= 0 z.number().multipleOf(5); // Evenly divisible by 5. Alias .step(5) z.number().finite(); // value must be finite, not Infinity or -Infinity
z.number().safe(); // value must be between Number.MIN_SAFE_INTEGER and Number.MAX_SAFE_INTEGER
``` ---------------------------------------- TITLE: Parse Data with Zod's Synchronous .parse() Method
DESCRIPTION: This snippet demonstrates using the `.parse()` method on a Zod schema to validate an input object. If the input is valid, Zod returns a strongly-typed deep clone of the data.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/zod/README.md#_snippet_3 LANGUAGE: typescript
CODE:
```
Player.parse({ username: "billie", xp: 100 });
// => returns { username: "billie", xp: 100 }
``` ---------------------------------------- TITLE: Zod: Setting Default Values with `.default`
DESCRIPTION: Explains how to use the `.default` method to provide fallback values for `undefined` inputs. It can accept a static value or a function that will be executed to generate a default value dynamically.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_100 LANGUAGE: typescript
CODE:
```
const stringWithDefault = z.string().default("tuna"); stringWithDefault.parse(undefined); // => "tuna"
``` LANGUAGE: typescript
CODE:
```
const numberWithRandomDefault = z.number().default(Math.random); numberWithRandomDefault.parse(undefined); // => 0.4413456736055323
numberWithRandomDefault.parse(undefined); // => 0.1871840107401901
numberWithRandomDefault.parse(undefined); // => 0.7223408162401552
``` ---------------------------------------- TITLE: Define Basic Object Schema in Zod
DESCRIPTION: Illustrates how to define a basic object schema in Zod where all properties are required by default. It also shows how to infer the corresponding TypeScript type from the schema.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_60 LANGUAGE: ts
CODE:
```
// all properties are required by default
const Person = z.object({ name: z.string(), age: z.number()
}); type Person = z.infer<typeof Person>;
// => { name: string; age: number; }
``` ---------------------------------------- TITLE: Zod String Validations and Transformations
DESCRIPTION: Demonstrates various built-in string validation methods like `max`, `min`, `email`, `url`, `uuid`, `regex`, `includes`, `startsWith`, `endsWith`, `datetime`, `ip`, `cidr`, `date`, `time`, `duration`, and `base64`. It also includes transformation methods such as `trim`, `toLowerCase`, and `toUpperCase` available in Zod.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_9 LANGUAGE: ts
CODE:
```
// validations
z.string().max(5);
z.string().min(5);
z.string().length(5);
z.string().email();
z.string().url();
z.string().emoji();
z.string().uuid();
z.string().nanoid();
z.string().cuid();
z.string().cuid2();
z.string().ulid();
z.string().regex(regex);
z.string().includes(string);
z.string().startsWith(string);
z.string().endsWith(string);
z.string().datetime(); // ISO 8601; by default only `Z` timezone allowed
z.string().ip(); // defaults to allow both IPv4 and IPv6
z.string().cidr(); // defaults to allow both IPv4 and IPv6 // transforms
z.string().trim(); // trim whitespace
z.string().toLowerCase(); // toLowerCase
z.string().toUpperCase(); // toUpperCase // added in Zod 3.23
z.string().date(); // ISO date format (YYYY-MM-DD)
z.string().time(); // ISO time format (HH:mm:ss[.SSSSSS] or HH:mm)
z.string().duration(); // ISO 8601 duration
z.string().base64();
``` ---------------------------------------- TITLE: Safely Parsing Data Asynchronously with Zod .safeParseAsync (TypeScript)
DESCRIPTION: Shows the asynchronous version of .safeParse(). This method is used when the schema involves asynchronous operations and you want to avoid throwing errors on validation failure, returning a promise that resolves to the success/failure result object.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/parsing.mdx#_snippet_4 LANGUAGE: TypeScript
CODE:
```
await stringSchema.safeParseAsync("billie");
``` ---------------------------------------- TITLE: Enable TypeScript Strict Mode for Zod
DESCRIPTION: This configuration snippet demonstrates how to enable `strict` mode within your `tsconfig.json` file. Enabling strict mode is a mandatory best practice for all TypeScript projects utilizing Zod, ensuring robust type checking.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/index.mdx#_snippet_3 LANGUAGE: TypeScript
CODE:
```
// tsconfig.json
{ // ... "compilerOptions": { // ... "strict": true }
}
``` ---------------------------------------- TITLE: Parsing Data with Zod Mini Schemas
DESCRIPTION: Demonstrates the standard parsing methods available on Zod Mini schemas, including synchronous and asynchronous parsing with and without error handling.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/mini.mdx#_snippet_2 LANGUAGE: ts
CODE:
```
import { z } from "zod/v4-mini" const mySchema = z.string(); mySchema.parse('asdf')
await mySchema.parseAsync('asdf')
mySchema.safeParse('asdf')
await mySchema.safeParseAsync('asdf')
``` ---------------------------------------- TITLE: Define Zod Object Schemas
DESCRIPTION: Shows the basic definition of a Zod object schema with required properties and how to infer its TypeScript type.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_41 LANGUAGE: typescript
CODE:
```
// all properties are required by default
const Dog = z.object({ name: z.string(), age: z.number(),
}); // extract the inferred type like this
type Dog = z.infer<typeof Dog>; // equivalent to:
type Dog = { name: string; age: number;
};
``` ---------------------------------------- TITLE: Parse Data with Zod Schema Synchronously
DESCRIPTION: This snippet demonstrates the `.parse()` method, which synchronously validates data against a Zod schema. If the data is valid, it returns the parsed value with full type information; otherwise, it throws an error, making it suitable for immediate validation.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_87 LANGUAGE: ts
CODE:
```
const stringSchema = z.string(); stringSchema.parse("fish"); // => returns "fish"
stringSchema.parse(12); // throws error
``` ---------------------------------------- TITLE: Extracting Input and Output Types from Transformed Zod Schema
DESCRIPTION: Explains how to use `z.input<>` and `z.output<>` to distinguish between the input and output types of a Zod schema, especially when the schema includes a `.transform()` operation that alters the type.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/basics.mdx#_snippet_7 LANGUAGE: ts
CODE:
```
const mySchema = z.string().transform((val) => val.length); type MySchemaIn = z.input<typeof mySchema>;
// => string type MySchemaOut = z.output<typeof mySchema>; // equivalent to z.infer<typeof mySchema>
// number
``` ---------------------------------------- TITLE: Define and Parse Union Types in Zod
DESCRIPTION: Shows how to create a union schema representing a logical 'OR' between different types. It also demonstrates parsing input against the union, where Zod checks each option in order and returns the first value that validates successfully.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_86 LANGUAGE: ts
CODE:
```
const stringOrNumber = z.union([z.string(), z.number()]);
// string | number stringOrNumber.parse("foo"); // passes
stringOrNumber.parse(14); // passes
``` ---------------------------------------- TITLE: Install Zod via npm
DESCRIPTION: This command installs the Zod library into your project using npm, making it available for use in your TypeScript or JavaScript applications.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/zod/README.md#_snippet_1 LANGUAGE: shell
CODE:
```
npm install zod
``` ---------------------------------------- TITLE: Make Zod Schema Optional with .optional()
DESCRIPTION: The `.optional()` method is a convenience method that transforms a schema into an optional version, allowing `undefined` in addition to the base type. It is equivalent to `z.optional(schema)`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_103 LANGUAGE: ts
CODE:
```
const optionalString = z.string().optional(); // string | undefined // equivalent to
z.optional(z.string());
``` ---------------------------------------- TITLE: Define Object Schema with Optional Properties in Zod
DESCRIPTION: Shows how to make specific properties optional within a Zod object schema. It demonstrates using `.optional()` for standard Zod and `z.optional()` for Zod Mini.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_61 LANGUAGE: ts
CODE:
```
const Dog = z.object({ name: z.string(), age: z.number().optional()
}); Dog.parse({ name: "Yeller" }); // ✅
``` LANGUAGE: ts
CODE:
```
const Dog = z.object({ name: z.string(), age: z.optional(z.number())
}); Dog.parse({ name: "Yeller" }); // ✅
``` ---------------------------------------- TITLE: Define Optional Properties in Zod Schemas
DESCRIPTION: Presents the equivalent and more concise way to define an object with optional properties in Zod, using the `.optional()` method directly on the schema definition. This highlights Zod's declarative API for schema definitions.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_122 LANGUAGE: TypeScript
CODE:
```
const C = z.object({ foo: z.string(), bar: z.number().optional(),
}); type C = z.infer<typeof C>;
// returns { foo: string; bar?: number | undefined }
``` ---------------------------------------- TITLE: Make Zod Schema Optional with z.optional()
DESCRIPTION: Demonstrates how to make an existing Zod schema optional, allowing `undefined` inputs. Shows two equivalent syntaxes for achieving this.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_53 LANGUAGE: ts
CODE:
```
z.optional(z.literal("yoda")); // or z.literal("yoda").optional()
``` LANGUAGE: ts
CODE:
```
z.optional(z.literal("yoda"));
``` ---------------------------------------- TITLE: Inferring Type from Zod Object Schema with z.infer
DESCRIPTION: Demonstrates how to use the `z.infer<>` utility to extract the static TypeScript type from a Zod object schema. This allows for strong type-checking of variables against the defined schema.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/basics.mdx#_snippet_6 LANGUAGE: ts
CODE:
```
const Player = z.object({ username: z.string(), xp: z.number()
}); // extract the inferred type
type Player = z.infer<typeof Player>; // use it in your code
const player: Player = { username: "billie", xp: 100 };
``` ---------------------------------------- TITLE: Extract TypeScript Type from Zod Schema with z.infer
DESCRIPTION: The `z.infer<typeof mySchema>` utility type extracts the TypeScript type inferred from any Zod schema. This allows for compile-time type checking based on your schema definitions.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_113 LANGUAGE: ts
CODE:
```
const A = z.string();
type A = z.infer<typeof A>; // string const u: A = 12; // TypeError
const u: A = "asdf"; // compiles
``` ---------------------------------------- TITLE: Explore Zod Primitive and Empty Types
DESCRIPTION: This snippet lists various primitive Zod schema types, including strings, numbers, booleans, and dates. It also covers special Zod types like `undefined`, `null`, `void`, `any`, `unknown`, and `never` for different validation scenarios.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_4 LANGUAGE: ts
CODE:
```
import { z } from "zod"; // primitive values
z.string();
z.number();
z.bigint();
z.boolean();
z.date();
z.symbol(); // empty types
z.undefined();
z.null();
z.void(); // accepts undefined // catch-all types
// allows any value
z.any();
z.unknown(); // never type
// allows no values
z.never();
``` ---------------------------------------- TITLE: Intersect Object Zod Schemas
DESCRIPTION: Demonstrates how to use `z.intersection()` to combine two Zod object schemas, `Person` and `Employee`, into a new schema `EmployedPerson`. This results in a schema that requires properties from both original objects, effectively creating a combined type.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_92 LANGUAGE: ts
CODE:
```
const Person = z.object({ name: z.string() });
type Person = z.infer<typeof Person>; const Employee = z.object({ role: z.string() });
type Employee = z.infer<typeof Employee>; const EmployedPerson = z.intersection(Person, Employee);
type EmployedPerson = z.infer<typeof EmployedPerson>;
// Person & Employee
``` ---------------------------------------- TITLE: Handle Zod Validation Errors with safeParse
DESCRIPTION: Demonstrates how to use `safeParse` to validate an object and access the `issues` array from the `ZodError` when validation fails. The `issues` array provides detailed information about the validation problems, including code, expected/received types, path, and message.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_119 LANGUAGE: TypeScript
CODE:
```
const result = z .object({ name: z.string(), }) .safeParse({ name: 12 }); if (!result.success) { result.error.issues; /* [ { "code": "invalid_type", "expected": "string", "received": "number", "path": [ "name" ], "message": "Expected string, received number" } ] */
}
``` ---------------------------------------- TITLE: Zod Transform: Basic Type Casting
DESCRIPTION: Demonstrates how to use `z.transform` to cast input values to a string type. It shows examples for both the full Zod library and Zod Mini, illustrating how different input types are converted.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_114 LANGUAGE: ts
CODE:
```
const castToString = z.transform((val) => String(val)); castToString.parse("asdf"); // => "asdf"
castToString.parse(123); // => "123"
castToString.parse(true); // => "true"
``` LANGUAGE: ts
CODE:
```
const castToString = z.transform((val) => String(val)); z.parse(castToString, "asdf"); // => "asdf"
z.parse(castToString, 123); // => "123"
z.parse(castToString, true); // => "true"
``` ---------------------------------------- TITLE: Handle Zod Validation Errors with try/catch and .parse()
DESCRIPTION: Demonstrates how to catch ZodError instances when using the .parse() method, which throws an error on validation failure. The example shows accessing granular error issues from the caught error.
SOURCE: https://github.com/colinhacks/zod/blob/main/README.md#_snippet_5 LANGUAGE: TypeScript
CODE:
```
import { z } from 'zod'; const Player = z.object({ username: z.string(), xp: z.number()
}); try { Player.parse({ username: 42, xp: "100" });
} catch (err) { if (err instanceof z.ZodError) { err.issues; /* [ { expected: 'string', code: 'invalid_type', path: [ 'username' ], message: 'Invalid input: expected string' }, { expected: 'number', code: 'invalid_type', path: [ 'xp' ], message: 'Invalid input: expected number' } ] */ }
}
``` ---------------------------------------- TITLE: Parse Data with Zod Schema Asynchronously
DESCRIPTION: This snippet shows the `.parseAsync()` method, which is necessary when a Zod schema includes asynchronous refinements or transforms. It returns a Promise that resolves with the validated data or rejects with an error if validation fails, supporting asynchronous validation flows.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_88 LANGUAGE: ts
CODE:
```
const stringSchema = z.string().refine(async (val) => val.length <= 8); await stringSchema.parseAsync("hello"); // => returns "hello"
await stringSchema.parseAsync("hello world"); // => throws error
``` ---------------------------------------- TITLE: Handle Zod validation errors using try/catch
DESCRIPTION: When validation fails, the `.parse()` method throws a `ZodError` instance with granular information about the validation issues. This example demonstrates catching the error and accessing its `issues` property.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/basics.mdx#_snippet_3 LANGUAGE: typescript
CODE:
```
try { Player.parse({ username: 42, xp: "100" });
} catch(error){ if(error instanceof z.ZodError){ error.issues; /* [ { expected: 'string', code: 'invalid_type', path: [ 'username' ], message: 'Invalid input: expected string' }, { expected: 'number', code: 'invalid_type', path: [ 'xp' ], message: 'Invalid input: expected number' } ] */ }
}
``` LANGUAGE: typescript
CODE:
```
try { Player.parse({ username: 42, xp: "100" });
} catch(error){ if(error instanceof z.core.$ZodError){ error.issues; /* [ { expected: 'string', code: 'invalid_type', path: [ 'username' ], message: 'Invalid input: expected string' }, { expected: 'number', code: 'invalid_type', path: [ 'xp' ], message: 'Invalid input: expected number' } ] */ }
}
``` ---------------------------------------- TITLE: Correctly Infer Parsed Data Type in Zod Generic Functions
DESCRIPTION: When parsing data within a generic function using `T extends z.ZodTypeAny`, TypeScript might infer the parsed data as `any`. To fix this, explicitly cast the result of `schema.parse(data)` to `z.infer<T>`, ensuring the correct inferred type is maintained.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_117 LANGUAGE: ts
CODE:
```
function parseData<T extends z.ZodTypeAny>(data: unknown, schema: T) { return schema.parse(data);
} parseData("sup", z.string());
// => any
``` LANGUAGE: ts
CODE:
```
function parseData<T extends z.ZodTypeAny>(data: unknown, schema: T) { return schema.parse(data) as z.infer<T>; // ^^^^^^^^^^^^^^ <- add this
} parseData("sup", z.string());
// => string
``` ---------------------------------------- TITLE: New Top-Level Zod String Format Validators
DESCRIPTION: String format validation APIs like .email() are now top-level functions (e.g., z.email()) for better tree-shaking and less verbosity. The method forms (z.string().email()) are deprecated but still functional.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/changelog.mdx#_snippet_16 LANGUAGE: TypeScript
CODE:
```
z.email();
z.uuid();
z.url();
z.emoji(); // validates a single emoji character
z.base64();
z.base64url();
z.nanoid();
z.cuid();
z.cuid2();
z.ulid();
z.ipv4();
z.ipv6();
z.cidrv4(); // ip range
z.cidrv6(); // ip range
z.iso.date();
z.iso.time();
z.iso.datetime();
z.iso.duration();
``` LANGUAGE: TypeScript
CODE:
```
z.string().email(); // ❌ deprecated
z.email(); // ✅
``` ---------------------------------------- TITLE: Zod: Basic Data Transformation with `.transform`
DESCRIPTION: Shows how to use the `.transform` method to modify data after it has been parsed by the schema. The example converts a string to its length.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_95 LANGUAGE: typescript
CODE:
```
const stringToNumber = z.string().transform((val) => val.length); stringToNumber.parse("string"); // => 6
``` ---------------------------------------- TITLE: Make Zod Schema Nullable with .nullable()
DESCRIPTION: The `.nullable()` method is a convenience method that transforms a schema into a nullable version, allowing `null` in addition to the base type. It is equivalent to `z.nullable(schema)`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_104 LANGUAGE: ts
CODE:
```
const nullableString = z.string().nullable(); // string | null // equivalent to
z.nullable(z.string());
``` ---------------------------------------- TITLE: Chaining Methods on Zod String Schema (TypeScript)
DESCRIPTION: This example illustrates Zod's chainable API by applying multiple methods directly to a string schema instance. It shows how to set minimum and maximum length constraints and apply a transformation like converting the string to lowercase.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/zod.mdx#_snippet_1 LANGUAGE: TypeScript
CODE:
```
z.string() .min(5) .max(10) .toLowerCase();
``` ---------------------------------------- TITLE: Basic Zod Number Validation
DESCRIPTION: Explains how to use `z.number()` for basic number validation, accepting finite numbers and rejecting `NaN` and `Infinity`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_33 LANGUAGE: ts
CODE:
```
const schema = z.number(); schema.parse(3.14); // ✅
schema.parse(NaN); // ❌
schema.parse(Infinity); // ❌
``` ---------------------------------------- TITLE: Define a Simple Zod Object Schema for Player Data
DESCRIPTION: This example shows how to define a basic Zod object schema for a 'Player' with `username` (string) and `xp` (number) properties. This schema can then be used to validate incoming data.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/zod/README.md#_snippet_2 LANGUAGE: typescript
CODE:
```
import { z } from "zod/v4"; const Player = z.object({ username: z.string(), xp: z.number(),
});
``` ---------------------------------------- TITLE: Zod Object Schema: Disallowing Unknown Keys with .strict()
DESCRIPTION: The `.strict()` method enforces strict validation on Zod object schemas. If any unknown keys are present in the input data, Zod will throw a `ZodError`, preventing unexpected properties from being parsed.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_51 LANGUAGE: ts
CODE:
```
const person = z .object({ name: z.string(), }) .strict(); person.parse({ name: "bob dylan", extraKey: 61,
});
// => throws ZodError
``` ---------------------------------------- TITLE: Zod Error Customization: `message` to `error` Parameter
DESCRIPTION: Illustrates the migration from the deprecated `message` parameter to the new, unified `error` parameter for customizing validation error messages in Zod schemas.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/changelog.mdx#_snippet_2 LANGUAGE: ts
CODE:
```
z.string().min(5, { error: "Too short." });
``` LANGUAGE: ts
CODE:
```
z.string().min(5, { message: "Too short." });
``` ---------------------------------------- TITLE: Handle Zod Validation Errors with .safeParse() for Result Objects
DESCRIPTION: Illustrates using the .safeParse() method to avoid try/catch blocks. It returns a discriminated union result object, allowing convenient handling of success or failure without throwing an exception.
SOURCE: https://github.com/colinhacks/zod/blob/main/README.md#_snippet_6 LANGUAGE: TypeScript
CODE:
```
import { z } from 'zod'; const Player = z.object({ username: z.string(), xp: z.number()
}); const result = Player.safeParse({ username: 42, xp: "100" });
if (!result.success) { result.error; // ZodError instance
} else { result.data; // { username: string; xp: number }
}
``` ---------------------------------------- TITLE: Zod safeParse Method for Non-Throwing Validation
DESCRIPTION: The .safeParse method allows validation without throwing errors, returning a discriminated union indicating success or failure with a ZodError instance. This enables convenient error handling using conditional checks.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_89 LANGUAGE: APIDOC
CODE:
```
.safeParse(data:unknown): { success: true; data: T; } | { success: false; error: ZodError; }
``` LANGUAGE: TypeScript
CODE:
```
stringSchema.safeParse(12);
// => { success: false; error: ZodError } stringSchema.safeParse("billie");
// => { success: true; data: 'billie' }
``` LANGUAGE: TypeScript
CODE:
```
const result = stringSchema.safeParse("billie");
if (!result.success) { // handle error then return result.error;
} else { // do something result.data;
}
``` ---------------------------------------- TITLE: Zod: Updated `z.refine` with `error` parameter
DESCRIPTION: This snippet shows the new, recommended way to use `z.refine()`, utilizing the `error` parameter within the options object to define custom error messages.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/changelog.mdx#_snippet_47 LANGUAGE: TypeScript
CODE:
```
const longString = z.string().refine((val) => val.length > 10, { error: (issue) => `${issue.input} is not more than 10 characters`,
});
``` ---------------------------------------- TITLE: Parse invalid data and inspect Zod error issues
DESCRIPTION: This example demonstrates parsing invalid data against the defined Zod schema, resulting in a ZodError. It then shows how to access the raw 'issues' array from the error object, which contains detailed information for each validation failure, including expected type, error code, path, and message.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/error-formatting.mdx#_snippet_1 LANGUAGE: ts
CODE:
```
const result = schema.safeParse({ username: 1234, favoriteNumbers: [1234, "4567"], extraKey: 1234,
}); result.error!.issues;
[ { expected: 'string', code: 'invalid_type', path: [ 'username' ], message: 'Invalid input: expected string, received number' }, { expected: 'number', code: 'invalid_type', path: [ 'favoriteNumbers', 1 ], message: 'Invalid input: expected number, received string' }, { code: 'unrecognized_keys', keys: [ 'extraKey' ], path: [], message: 'Unrecognized key: "extraKey"' }
];
``` ---------------------------------------- TITLE: Zod 4 Refinement Chaining Improvement Example
DESCRIPTION: This snippet demonstrates the improvement in Zod 4 where refinements are integrated directly into schemas. This allows for seamless chaining of '.refine()' with other schema methods like '.min()', resolving the 'ZodEffects' limitation seen in Zod 3 and enabling more intuitive schema construction.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_41 LANGUAGE: TypeScript
CODE:
```
z.string() .refine(val => val.includes("@")) .min(5); // ✅
``` ---------------------------------------- TITLE: Customize Zod String Schema Error Messages
DESCRIPTION: Shows how to provide custom error messages for `required_error` and `invalid_type_error` when defining a Zod string schema. These messages are applied when the schema is required but missing, or when the input type is not a string, respectively.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_10 LANGUAGE: ts
CODE:
```
const name = z.string({ required_error: "Name is required", invalid_type_error: "Name must be a string"
});
``` ---------------------------------------- TITLE: Customize Zod Number Schema Error Messages
DESCRIPTION: When defining a number schema in Zod, you can customize the error messages for common validation failures. The `required_error` option sets the message for missing values, while `invalid_type_error` handles cases where the input is not a number.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_20 LANGUAGE: ts
CODE:
```
const age = z.number({ required_error: "Age is required", invalid_type_error: "Age must be a number",
});
``` ---------------------------------------- TITLE: Make Zod Schema Nullish with .nullish()
DESCRIPTION: The `.nullish()` method is a convenience method that transforms a schema to accept both `undefined` and `null`. This is conceptually similar to TypeScript's nullish coalescing and is equivalent to chaining `.nullable().optional()`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_105 LANGUAGE: ts
CODE:
```
const nullishString = z.string().nullish(); // string | null | undefined // equivalent to
z.string().nullable().optional();
``` ---------------------------------------- TITLE: Define Nullable Zod Schemas
DESCRIPTION: Illustrates how to create nullable Zod types with `z.nullable()` or the `.nullable()` method, demonstrating parsing behavior for null values and how to retrieve the wrapped schema.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_40 LANGUAGE: typescript
CODE:
```
const nullableString = z.nullable(z.string());
nullableString.parse("asdf"); // => "asdf"
nullableString.parse(null); // => null
``` LANGUAGE: typescript
CODE:
```
const E = z.string().nullable(); // equivalent to nullableString
type E = z.infer<typeof E>; // string | null
``` LANGUAGE: typescript
CODE:
```
const stringSchema = z.string();
const nullableString = stringSchema.nullable();
nullableString.unwrap() === stringSchema; // true
``` ---------------------------------------- TITLE: Pretty-Printing Zod Errors
DESCRIPTION: Zod 4 provides `z.prettifyError` to convert a `ZodError` instance into a user-friendly, formatted multi-line string. This function addresses the demand for better error readability, similar to the `zod-validation-error` package.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_26 LANGUAGE: ts
CODE:
```
const myError = new z.ZodError([ { code: 'unrecognized_keys', keys: [ 'extraField' ], path: [], message: 'Unrecognized key: "extraField"' }, { expected: 'string', code: 'invalid_type', path: [ 'username' ], message: 'Invalid input: expected string, received number' }, { origin: 'number', code: 'too_small', minimum: 0, inclusive: true, path: [ 'favoriteNumbers', 1 ], message: 'Too small: expected number to be >=0' }
]); z.prettifyError(myError);
``` LANGUAGE: text
CODE:
```
✖ Unrecognized key: "extraField"
✖ Invalid input: expected string, received number → at username
✖ Invalid input: expected number, received string → at favoriteNumbers[1]
``` ---------------------------------------- TITLE: Zod Defaults: Setting a Static Default Value
DESCRIPTION: Demonstrates how to set a static default value for a schema using `.default()`. This value is used when the input is `undefined`, ensuring a fallback value is always provided.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_120 LANGUAGE: ts
CODE:
```
const defaultTuna = z.string().default("tuna"); defaultTuna.parse(undefined); // => "tuna"
``` LANGUAGE: ts
CODE:
```
const defaultTuna = z._default(z.string(), "tuna"); defaultTuna.parse(undefined); // => "tuna"
``` ---------------------------------------- TITLE: Zod Transform: Asynchronous Data Transformation
DESCRIPTION: Illustrates how to define and use asynchronous transforms in Zod. This example shows fetching a user from a database based on an ID, highlighting the need to use `parseAsync` or `safeParseAsync` when dealing with async transforms.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_118 LANGUAGE: ts
CODE:
```
const idToUser = z .string() .transform(async (id) => { // fetch user from database return db.getUserById(id); }); const user = await idToUser.parseAsync("abc123");
``` LANGUAGE: ts
CODE:
```
const idToUser = z.pipe( z.string(), z.transform(async (id) => { // fetch user from database return db.getUserById(id); })); const user = await idToUser.parse("abc123");
``` ---------------------------------------- TITLE: Extend Zod Object Schemas with .extend
DESCRIPTION: Shows how to add new fields or overwrite existing ones in a Zod object schema using the `.extend()` method.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_44 LANGUAGE: typescript
CODE:
```
const DogWithBreed = Dog.extend({ breed: z.string(),
});
``` ---------------------------------------- TITLE: Parse Asynchronous Zod Schemas with .safeParseAsync()
DESCRIPTION: Explains the use of .safeParseAsync() for schemas that include asynchronous operations like async refinements or transforms. This method returns a promise that resolves to a result object, similar to .safeParse().
SOURCE: https://github.com/colinhacks/zod/blob/main/README.md#_snippet_7 LANGUAGE: TypeScript
CODE:
```
import { z } from 'zod'; const schema = z.string().refine(async (val) => val.length <= 8); await schema.safeParseAsync("hello");
// => { success: true; data: "hello" }
``` ---------------------------------------- TITLE: Validate Optional URL String with Zod Union
DESCRIPTION: Shows how to validate an optional form input that should be a URL, allowing `undefined`, `null`, or an empty string, in addition to a valid URL. This is achieved by unioning `z.string().url().nullish()` with `z.literal("")`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_61 LANGUAGE: TypeScript
CODE:
```
const optionalUrl = z.union([z.string().url().nullish(), z.literal("")]); console.log(optionalUrl.safeParse(undefined).success); // true
console.log(optionalUrl.safeParse(null).success); // true
console.log(optionalUrl.safeParse("").success); // true
console.log(optionalUrl.safeParse("https://zod.dev").success); // true
console.log(optionalUrl.safeParse("not a valid url").success); // false
``` ---------------------------------------- TITLE: Flatten Zod error into a shallow object with z.flattenError()
DESCRIPTION: Demonstrates `z.flattenError()`, which converts a Zod error into a shallow object with `formErrors` (top-level errors) and `fieldErrors` (errors per field). This is ideal for simple, flat schemas, though it may discard information for errors with paths longer than one level.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/error-formatting.mdx#_snippet_7 LANGUAGE: ts
CODE:
```
const flattened = z.flattenError(result.error);
// { errors: string[], properties: { [key: string]: string[] } } { formErrors: [ 'Unrecognized key: "extraKey"' ], fieldErrors: { username: [ 'Invalid input: expected string, received number' ], favoriteNumbers: [ 'Invalid input: expected number, received string' ] }
}
``` ---------------------------------------- TITLE: Chaining Zod Schemas with .pipe() for Transformations
DESCRIPTION: Explains how to use the `.pipe()` method to chain Zod schemas, primarily for data transformations. It demonstrates transforming a string schema into a number schema representing the string's length.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_113 LANGUAGE: ts
CODE:
```
const stringToLength = z.string().pipe(z.transform(val => val.length)); stringToLength.parse("hello"); // => 5
``` LANGUAGE: ts
CODE:
```
const stringToLength = z.pipe(z.string(), z.transform(val => val.length)); z.parse(stringToLength, "hello"); // => 5
``` ---------------------------------------- TITLE: Make All Fields Optional in Zod Object Schema
DESCRIPTION: Demonstrates how to make all properties of a Zod object schema optional, analogous to TypeScript's `Partial` utility type. Examples are provided for both standard Zod and Zod Mini, showing the resulting schema type.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_73 LANGUAGE: ts
CODE:
```
const PartialRecipe = Recipe.partial();
// { title?: string | undefined; description?: string | undefined; ingredients?: string[] | undefined }
``` LANGUAGE: ts
CODE:
```
const PartialRecipe = z.partial(Recipe);
// { title?: string | undefined; description?: string | undefined; ingredients?: string[] | undefined }
``` ---------------------------------------- TITLE: Parse data with async refinements using `parseAsync` in Zod
DESCRIPTION: Illustrates the correct method (`parseAsync`) to use when parsing data against a schema that includes asynchronous refinements, as synchronous parsing will throw an error.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_110 LANGUAGE: ts
CODE:
```
const result = await userId.parseAsync("abc123");
``` LANGUAGE: ts
CODE:
```
const result = await z.parseAsync(userId, "abc123");
``` ---------------------------------------- TITLE: Create Zod Union Type with .or()
DESCRIPTION: The `.or()` method is a convenience method for creating union types, allowing a schema to match one of several types. It is equivalent to `z.union([schema1, schema2])`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_108 LANGUAGE: ts
CODE:
```
const stringOrNumber = z.string().or(z.number()); // string | number // equivalent to
z.union([z.string(), z.number()]);
``` ---------------------------------------- TITLE: Define a Zod string schema with a direct error message
DESCRIPTION: This snippet demonstrates how to set a custom error message directly as an argument to a Zod schema definition, which will appear as the `message` property of any validation issues.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/error-customization.mdx#_snippet_1 LANGUAGE: ts
CODE:
```
z.string("Not a string!");
``` ---------------------------------------- TITLE: Defining Recursive and Mutually Recursive Zod Schemas
DESCRIPTION: Zod 4 provides a new, simpler way to infer and define recursive object types without requiring type casting. This approach also supports mutually recursive types, where two or more schemas refer to each other. The resulting schemas are plain `ZodObject` instances with all standard methods available.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_23 LANGUAGE: ts
CODE:
```
const Category = z.object({ name: z.string(), get subcategories(){ return z.array(Category) }
}); type Category = z.infer<typeof Category>;
// { name: string; subcategories: Category[] }
``` LANGUAGE: ts
CODE:
```
const User = z.object({ email: z.email(), get posts(){ return z.array(Post) }
}); const Post = z.object({ title: z.string(), get author(){ return User }
});
``` LANGUAGE: ts
CODE:
```
Post.pick({ title: true })
Post.partial();
Post.extend({ publishDate: z.date() });
``` ---------------------------------------- TITLE: Define Zod Schema for Multiple Literal Values
DESCRIPTION: Shows how to define a Zod schema that allows a predefined set of multiple literal values, demonstrating successful and failed parsing examples for validation.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_5 LANGUAGE: ts
CODE:
```
const colors = z.literal(["red", "green", "blue"]); colors.parse("green"); // ✅
colors.parse("yellow"); // ❌
``` ---------------------------------------- TITLE: Asynchronously Parse Zod Schemas with safeParseAsync()
DESCRIPTION: Shows how to use `.safeParseAsync()` for schemas that incorporate asynchronous APIs, such as `async` refinements or transforms. This method returns a promise that resolves to a result object, similar to `safeParse()`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/zod/README.md#_snippet_7 LANGUAGE: TypeScript
CODE:
```
const schema = z.string().refine(async (val) => val.length <= 8); await schema.safeParseAsync("hello");
// => { success: true; data: "hello" }
``` ---------------------------------------- TITLE: Zod: Asynchronous Data Transformations
DESCRIPTION: Shows how to define asynchronous transformations using `async` functions within `.transform`. When using async transforms, it is mandatory to use `parseAsync()` or `safeParseAsync()` for parsing data.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_99 LANGUAGE: typescript
CODE:
```
const IdToUser = z .string() .uuid() .transform(async (id) => { return await getUserById(id); });
``` ---------------------------------------- TITLE: Define asynchronous refinements in Zod
DESCRIPTION: Provides an example of an asynchronous refinement function, useful for validations that require external data (e.g., database lookups). Note that `parseAsync` must be used with async refinements.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_109 LANGUAGE: ts
CODE:
```
const userId = z.string().refine(async (id) => { // verify that ID exists in database return true;
});
``` ---------------------------------------- TITLE: Define Initial Zod Object Schema for Recipe
DESCRIPTION: Defines a base Zod object schema named `Recipe` with `title`, `description` (optional), and `ingredients` properties, which serves as the starting point for subsequent `pick`, `omit`, `partial`, and `required` operations.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_70 LANGUAGE: ts
CODE:
```
const Recipe = z.object({ title: z.string(), description: z.string().optional(), ingredients: z.array(z.string()),
});
// { title: string; description?: string | undefined; ingredients: string[] }
``` ---------------------------------------- TITLE: Zod Top-Level String Formats
DESCRIPTION: Demonstrates the new top-level functions for common string formats in Zod 4, such as email, UUID, IP addresses, and URLs. These functions are more concise and tree-shakable compared to their deprecated method equivalents.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_27 LANGUAGE: ts
CODE:
```
z.email();
z.uuidv4();
z.uuidv7();
z.uuidv8();
z.ipv4();
z.ipv6();
z.cidrv4();
z.cidrv6();
z.url();
z.e164();
z.base64();
z.base64url();
z.jwt();
z.ascii();
z.utf8();
z.lowercase();
z.iso.date();
z.iso.datetime();
z.iso.duration();
z.iso.time();
``` ---------------------------------------- TITLE: Handle Zod Validation Errors with Try/Catch
DESCRIPTION: Demonstrates how to catch `ZodError` instances thrown by the `.parse()` method when validation fails on a Zod schema, providing granular information about the validation issues.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/zod/README.md#_snippet_5 LANGUAGE: TypeScript
CODE:
```
try { Player.parse({ username: 42, xp: "100" });
} catch (err) { if (err instanceof z.ZodError) { err.issues; /* [ { expected: 'string', code: 'invalid_type', path: [ 'username' ], message: 'Invalid input: expected string' }, { expected: 'number', code: 'invalid_type', path: [ 'xp' ], message: 'Invalid input: expected number' } ] */ }
}
``` ---------------------------------------- TITLE: Safely parse data asynchronously with Zod's .safeParseAsync() method
DESCRIPTION: Similar to `.safeParse()`, the `.safeParseAsync()` method is used for schemas with asynchronous APIs. It returns a promise that resolves to a discriminated union, providing a safe way to handle async validation results.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/basics.mdx#_snippet_5 LANGUAGE: typescript
CODE:
```
const schema = z.string().refine(async (val) => val.length <= 8); await schema.safeParseAsync("hello");
// => { success: true; data: "hello" }
``` ---------------------------------------- TITLE: Validate Email Addresses with Zod
DESCRIPTION: Demonstrates the basic usage of `z.email()` for validating email addresses using Zod's default strict regex, which is designed for common email formats.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_10 LANGUAGE: ts
CODE:
```
z.email();
``` ---------------------------------------- TITLE: Zod: Validating and Transforming Data Simultaneously
DESCRIPTION: Demonstrates how the `.transform` method can perform both data transformation and validation. It receives a `ctx` object, allowing `addIssue` to register validation errors, and `z.NEVER` for early exit.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_97 LANGUAGE: typescript
CODE:
```
const numberInString = z.string().transform((val, ctx) => { const parsed = parseInt(val); if (isNaN(parsed)) { ctx.addIssue({ code: z.ZodIssueCode.custom, message: "Not a number", }); // This is a special symbol you can use to // return early from the transform function. // It has type `never` so it does not affect the // inferred return type. return z.NEVER; } return parsed;
});
``` ---------------------------------------- TITLE: Using Zod Core's Top-Level Parsing Functions
DESCRIPTION: This TypeScript example demonstrates how to use the top-level parsing functions (`parse`, `safeParse`, `parseAsync`, `safeParseAsync`) provided by `zod/v4/core`. Since core schema classes lack direct methods, these functions are used to validate data against a schema, offering both synchronous and asynchronous, and throwing or non-throwing (safe) parsing options.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/core.mdx#_snippet_6 LANGUAGE: ts
CODE:
```
import * as z from "zod/v4/core"; const schema = new z.$ZodString({ type: "string" });
z.parse(schema, "hello");
z.safeParse(schema, "hello");
await z.parseAsync(schema, "hello");
await z.safeParseAsync(schema, "hello");
``` ---------------------------------------- TITLE: Zod Array Schema: Defining Basic Arrays
DESCRIPTION: Zod provides the `.array()` method to define schemas for arrays. The order of method calls, such as `.optional()` and `.array()`, is crucial as it affects the inferred TypeScript type of the resulting schema.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_53 LANGUAGE: ts
CODE:
```
const stringArray = z.array(z.string()); // equivalent
const stringArray = z.string().array();
``` LANGUAGE: ts
CODE:
```
z.string().optional().array(); // (string | undefined)[]
z.string().array().optional(); // string[] | undefined
``` ---------------------------------------- TITLE: Create Zod Intersection Type with .and()
DESCRIPTION: The `.and()` method is a convenience method for creating intersection types, combining the properties of multiple object schemas. It is equivalent to `z.intersection(schema1, schema2)`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_109 LANGUAGE: ts
CODE:
```
const nameAndAge = z .object({ name: z.string() }) .and(z.object({ age: z.number() })); // { name: string } & { age: number } // equivalent to
z.intersection(z.object({ name: z.string() }), z.object({ age: z.number() }));
``` ---------------------------------------- TITLE: Validate Common String Formats with Zod
DESCRIPTION: Shows how to validate strings against a variety of common formats such as email addresses, UUIDs, URLs, emojis, and various base64/ID formats, as well as ISO date/time formats.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_9 LANGUAGE: ts
CODE:
```
z.email();
z.uuid();
z.url();
z.emoji(); // validates a single emoji character
z.base64();
z.base64url();
z.nanoid();
z.cuid();
z.cuid2();
z.ulid();
z.ipv4();
z.ipv6();
z.cidrv4(); // ipv4 CIDR block
z.cidrv6(); // ipv6 CIDR block
z.iso.date();
z.iso.time();
z.iso.datetime();
z.iso.duration();
``` ---------------------------------------- TITLE: Deeply Partial Zod Object Schemas with .deepPartial
DESCRIPTION: Introduces the `.deepPartial()` method for making properties optional recursively within nested objects, arrays, and tuples in a Zod schema.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_48 LANGUAGE: typescript
CODE:
```
const user = z.object({ username: z.string(), location: z.object({ latitude: z.number(), longitude: z.number(), }), strings: z.array(z.object({ value: z.string() })),
});
``` LANGUAGE: typescript
CODE:
```
const deepPartialUser = user.deepPartial(); /*
{ username?: string | undefined, location?: { latitude?: number | undefined; longitude?: number | undefined; } | undefined, strings?: { value?: string}[]
}*/
``` ---------------------------------------- TITLE: Define Basic Zod Union Type
DESCRIPTION: Demonstrates the fundamental usage of `z.union` to create a schema that accepts values matching any of the provided types. It shows how to parse both string and number inputs successfully.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_59 LANGUAGE: TypeScript
CODE:
```
const stringOrNumber = z.union([z.string(), z.number()]); stringOrNumber.parse("foo"); // passes
stringOrNumber.parse(14); // passes
``` ---------------------------------------- TITLE: Constrain Zod Schema Input Types in Generic Functions
DESCRIPTION: You can constrain the types of schemas accepted by a generic function by leveraging the three generic parameters of the `ZodType` class (`Output`, `Def`, `Input`). This allows you to enforce specific type requirements for schema inputs, such as only accepting schemas that infer to `string`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_118 LANGUAGE: ts
CODE:
```
function makeSchemaOptional<T extends z.ZodType<string>>(schema: T) { return schema.optional();
} makeSchemaOptional(z.string());
// works fine makeSchemaOptional(z.number());
// Error: 'ZodNumber' is not assignable to parameter of type 'ZodType<string, ZodTypeDef, string>'
``` ---------------------------------------- TITLE: Apply direct string error messages to various Zod schema types
DESCRIPTION: This snippet illustrates how to apply custom string error messages directly to various Zod schema types and methods, such as `min`, `uuid`, `iso.date`, `array`, and `set`, for both Zod and Zod Mini libraries.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/error-customization.mdx#_snippet_3 LANGUAGE: ts
CODE:
```
z.string("Bad!");
z.string().min(5, "Too short!");
z.uuid("Bad UUID!");
z.iso.date("Bad date!");
z.array(z.string(), "Not an array!");
z.array(z.string()).min(5, "Too few items!");
z.set(z.string(), "Bad set!");
``` LANGUAGE: ts
CODE:
```
z.string("Bad!");
z.string().check(z.minLength(5, "Too short!"));
z.uuid("Bad UUID!");
z.iso.date("Bad date!");
z.array(z.string(), "Bad array!");
z.array(z.string()).check(z.minLength(5, "Too few items!"));
z.set(z.string(), "Bad set!");
``` ---------------------------------------- TITLE: Parsing Data Asynchronously with Zod .parseAsync (TypeScript)
DESCRIPTION: Shows how to use the .parseAsync() method, necessary when the schema includes asynchronous operations like async refinements. It includes defining a schema with an async refinement and demonstrates successful and failed asynchronous parsing.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/parsing.mdx#_snippet_1 LANGUAGE: TypeScript
CODE:
```
const stringSchema = z.string().refine(async (val) => val.length <= 8); await stringSchema.parseAsync("hello"); // => returns "hello"
await stringSchema.parseAsync("hello world"); // => throws error
``` ---------------------------------------- TITLE: Infer Zod Schema Input and Output Types with z.input<> and z.output<>
DESCRIPTION: Demonstrates how to infer distinct input and output types for schemas where transformations cause divergence. z.input<> extracts the type before transformation, and z.output<> (or z.infer<>) extracts the type after transformation.
SOURCE: https://github.com/colinhacks/zod/blob/main/README.md#_snippet_9 LANGUAGE: TypeScript
CODE:
```
import { z } from 'zod'; const mySchema = z.string().transform((val) => val.length); type MySchemaIn = z.input<typeof mySchema>;
// => string type MySchemaOut = z.output<typeof mySchema>; // equivalent to z.infer<typeof mySchema>
// number
``` ---------------------------------------- TITLE: Create Zod Array Schema with .array()
DESCRIPTION: The `.array()` method is a convenience method that creates an array schema for the given base type. It is equivalent to `z.array(schema)`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_106 LANGUAGE: ts
CODE:
```
const stringArray = z.string().array(); // string[] // equivalent to
z.array(z.string());
``` ---------------------------------------- TITLE: Validate Inputs with Zod z.enum
DESCRIPTION: Demonstrates basic usage of `z.enum` to validate string inputs against a predefined set of values. Shows how to define an enum schema and parse values, highlighting successful and failed parsing.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_43 LANGUAGE: ts
CODE:
```
const FishEnum = z.enum(["Salmon", "Tuna", "Trout"]); FishEnum.parse("Salmon"); // => "Salmon"
FishEnum.parse("Swordfish"); // => ❌
``` ---------------------------------------- TITLE: Convert Zod error to nested object using z.treeifyError()
DESCRIPTION: This snippet shows how to use `z.treeifyError()` to transform a Zod error into a nested object structure that mirrors the original schema. The result includes 'errors' at each path and special 'properties' and 'items' fields to traverse deeper into the tree, allowing for easy access to specific validation messages.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/error-formatting.mdx#_snippet_2 LANGUAGE: ts
CODE:
```
const tree = z.treeifyError(result.error); // =>
{ errors: [ 'Unrecognized key: "extraKey"' ], properties: { username: { errors: [ 'Invalid input: expected string, received number' ] }, favoriteNumbers: { errors: [], items: [ undefined, { errors: [ 'Invalid input: expected number, received string' ] } ] } }
}
``` ---------------------------------------- TITLE: Use Zod z.enum with TypeScript Enums
DESCRIPTION: Demonstrates how to integrate an externally-declared TypeScript enum directly with `z.enum` for schema validation. This allows Zod to validate inputs against the values defined in the TypeScript enum.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_46 LANGUAGE: ts
CODE:
```
enum Fish { Salmon = "Salmon", Tuna = "Tuna", Trout = "Trout"
} const FishEnum = z.enum(Fish);
``` ---------------------------------------- TITLE: Zod .default() and .prefault() Behavior Changes
DESCRIPTION: In Zod 4, .default() short-circuits parsing if input is undefined and the default value must match the output type. To replicate Zod 3's behavior, where the default value was parsed and matched the input type, use the new .prefault() API.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/changelog.mdx#_snippet_20 LANGUAGE: TypeScript
CODE:
```
const schema = z.string() .transform(val => val.length) .default(0); // should be a number
schema.parse(undefined); // => 0
``` LANGUAGE: TypeScript
CODE:
```
// Zod 3
const schema = z.string() .transform(val => val.length) .default("tuna");
schema.parse(undefined); // => 4
``` LANGUAGE: TypeScript
CODE:
```
// Zod 3
const schema = z.string() .transform(val => val.length) .prefault("tuna");
schema.parse(undefined); // => 4
``` ---------------------------------------- TITLE: Extend Zod Object Schema with .extend() Method
DESCRIPTION: Demonstrates how to add new fields to an existing Zod object schema using the `.extend()` method in both standard Zod and Zod Mini. It also notes that this method can overwrite existing fields.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_68 LANGUAGE: ts
CODE:
```
const DogWithBreed = Dog.extend({ breed: z.string(),
});
``` LANGUAGE: ts
CODE:
```
const DogWithBreed = z.extend(Dog, { breed: z.string(),
});
``` ---------------------------------------- TITLE: Format Zod Errors into Nested Objects
DESCRIPTION: Illustrates the use of the `.format()` method on a `ZodError` to convert the detailed error issues into a more user-friendly nested object structure. This can be useful for presenting simplified error messages to end-users.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_120 LANGUAGE: TypeScript
CODE:
```
const result = z .object({ name: z.string(), }) .safeParse({ name: 12 }); if (!result.success) { const formatted = result.error.format(); /* { name: { _errors: [ 'Expected string, received number' ] } } */ formatted.name?._errors; // => ["Expected string, received number"]
}
``` ---------------------------------------- TITLE: Perform Common String Validations with Zod
DESCRIPTION: Demonstrates various built-in string validation methods available in Zod and Zod Mini. These methods allow for enforcing length constraints, pattern matching with regex, checking prefixes/suffixes, and case transformations.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_7 LANGUAGE: ts
CODE:
```
z.string().max(5);
z.string().min(5);
z.string().length(5);
z.string().regex(/^[a-z]+$/);
z.string().startsWith("aaa");
z.string().endsWith("zzz");
z.string().includes("---");
z.string().uppercase();
z.string().lowercase();
``` LANGUAGE: ts
CODE:
```
z.string().check(z.maxLength(5));
z.string().check(z.minLength(5));
z.string().check(z.length(5));
z.string().check(z.regex(/^[a-z]+$/));
z.string().check(z.startsWith("aaa"));
z.string().check(z.endsWith("zzz"));
z.string().check(z.includes("---"));
z.string().check(z.uppercase());
z.string().check(z.lowercase());
``` ---------------------------------------- TITLE: Zod superRefine Method for Advanced Custom Validation
DESCRIPTION: The .superRefine method offers a more versatile approach to custom validation than .refine. It allows adding multiple validation issues with specific ZodIssueCode's and detailed error information by interacting with a context object (ctx). Validation passes if ctx.addIssue is not called.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_92 LANGUAGE: TypeScript
CODE:
```
const Strings = z.array(z.string()).superRefine((val, ctx) => { if (val.length > 3) { ctx.addIssue({ code: z.ZodIssueCode.too_big, maximum: 3, type: "array", inclusive: true, message: "Too many items 😡" }); } if (val.length !== new Set(val).size) { ctx.addIssue({ code: z.ZodIssueCode.custom, message: `No duplicates allowed.` }); }
});
``` ---------------------------------------- TITLE: Define Discriminated Union Schema with Zod
DESCRIPTION: Demonstrates how to define a discriminated union schema using Zod's `z.discriminatedUnion()` method. It takes the discriminator key ('status') as the first argument and an array of Zod object schemas as the second, enabling efficient parsing based on the specified key.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_89 LANGUAGE: ts
CODE:
```
const MyResult = z.discriminatedUnion("status", [ z.object({ status: z.literal("success"), data: z.string() }), z.object({ status: z.literal("failed"), error: z.string() }),
]);
``` ---------------------------------------- TITLE: Distinguish Input and Output Types in Zod Transforms
DESCRIPTION: Zod schemas internally track both an input and an output type. For schemas with transforms, these types can diverge. Use `z.input<typeof mySchema>` to get the input type and `z.output<typeof mySchema>` (or `z.infer`) to get the output type, providing precise type control for transformed data.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_114 LANGUAGE: ts
CODE:
```
const stringToNumber = z.string().transform((val) => val.length); // ⚠️ Important: z.infer returns the OUTPUT type!
type input = z.input<typeof stringToNumber>; // string
type output = z.output<typeof stringToNumber>; // number // equivalent to z.output!
type inferred = z.infer<typeof stringToNumber>; // number
``` ---------------------------------------- TITLE: Zod Custom Email Regex Patterns
DESCRIPTION: Illustrates how to use the `z.email()` API with custom regular expressions for email validation. Zod provides convenient exports for common regex patterns, including its default, HTML5, RFC 5322, and Unicode-friendly options, allowing developers to choose the appropriate strictness level.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_28 LANGUAGE: ts
CODE:
```
// Zod's default email regex (Gmail rules)
// see colinhacks.com/essays/reasonable-email-regex
z.email(); // z.regexes.email // the regex used by browsers to validate input[type=email] fields
// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email
z.email({ pattern: z.regexes.html5Email }); // the classic emailregex.com regex (RFC 5322)
z.email({ pattern: z.regexes.rfc5322Email }); // a loose regex that allows Unicode (good for intl emails)
z.email({ pattern: z.regexes.unicodeEmail });
``` ---------------------------------------- TITLE: Define Zod Object Schema with Extension (Zod v4)
DESCRIPTION: Demonstrates defining a Zod object schema and extending it with additional properties using `zod/v4`. This example highlights the simplified generics in Zod 4 that significantly reduce `tsc` type instantiations compared to Zod 3.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_7 LANGUAGE: ts
CODE:
```
import { z } from "zod/v4"; export const A = z.object({ a: z.string(), b: z.string(), c: z.string(), d: z.string(), e: z.string()
}); export const B = A.extend({ f: z.string(), g: z.string(), h: z.string()
});
``` ---------------------------------------- TITLE: Parse Data with Zod's Asynchronous .parseAsync() Method
DESCRIPTION: This example illustrates the use of `.parseAsync()` for schemas that include asynchronous operations like `refine` or `transform`. It shows how to validate a string asynchronously based on its length.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/zod/README.md#_snippet_4 LANGUAGE: typescript
CODE:
```
const schema = z.string().refine(async (val) => val.length <= 8); await schema.parseAsync("hello");
// => "hello"
``` ---------------------------------------- TITLE: Using Zod's .check() for Advanced Custom Validation
DESCRIPTION: Illustrates the `.check()` API, a more versatile alternative to `.refine()`, allowing full control over issue objects and the ability to create multiple issues in a single refinement. It demonstrates checking array length and duplicates, pushing issues via `ctx.issues.push`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_112 LANGUAGE: ts
CODE:
```
const UniqueStringArray = z.array(z.string()).check((ctx) => { if (ctx.value.length > 3) { ctx.issues.push({ code: "too_big", maximum: 3, origin: "array", inclusive: true, message: "Too many items 😡", input: ctx.value }); } if (ctx.value.length !== new Set(ctx.value).size) { ctx.issues.push({ code: "custom", message: `No duplicates allowed.`, input: ctx.value, continue: true // make this issue continuable (default: false) }); }
});
``` LANGUAGE: ts
CODE:
```
const UniqueStringArray = z.array(z.string()).check((ctx) => { if (ctx.value.length > 3) { ctx.issues.push({ code: "too_big", maximum: 3, origin: "array", inclusive: true, message: "Too many items 😡", input: ctx.value }); } if (ctx.value.length !== new Set(ctx.value).size) { ctx.issues.push({ code: "custom", message: `No duplicates allowed.`, input: ctx.value, continue: true // make this issue continuable (default: false) }); }
});
``` ---------------------------------------- TITLE: Access specific errors from a flattened Zod error
DESCRIPTION: Illustrates how to access specific error messages from the `fieldErrors` property of the object returned by `z.flattenError()`, targeting errors associated with particular fields.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/error-formatting.mdx#_snippet_8 LANGUAGE: ts
CODE:
```
flattened.fieldErrors.username; // => [ 'Invalid input: expected string, received number' ]
flattened.fieldErrors.favoriteNumbers; // => [ 'Invalid input: expected number, received string' ]
``` ---------------------------------------- TITLE: Configure Zod with Built-in Locales for Internationalization
DESCRIPTION: Shows how to configure Zod using the convenient `z.locales` object to access built-in locales like English. While convenient, this approach might not be tree-shakable in some bundlers, especially for Zod Mini.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/error-customization.mdx#_snippet_17 LANGUAGE: ts
CODE:
```
import { z } from "zod/v4"; z.config(z.locales.en());
``` LANGUAGE: ts
CODE:
```
import { z } from "zod/v4-mini" z.config(z.locales.en());
``` ---------------------------------------- TITLE: Define Zod Coercion Schemas
DESCRIPTION: Demonstrates how to use `z.coerce` to define schemas that automatically attempt to convert input data to the specified type, including string, number, boolean, and bigint.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_1 LANGUAGE: ts
CODE:
```
z.coerce.string(); // String(input)
z.coerce.number(); // Number(input)
z.coerce.boolean(); // Boolean(input)
z.coerce.bigint(); // BigInt(input)
``` ---------------------------------------- TITLE: Zod String to Boolean Coercion with `z.stringbool()`
DESCRIPTION: Introduces `z.stringbool()`, a new API for sophisticated 'env-style' boolean coercion, distinct from `z.coerce.boolean()`. It parses various string representations like 'true', '1', 'yes', 'on', 'y', 'enabled' to `true`, and their counterparts to `false`, throwing a `ZodError` for unrecognised values.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_32 LANGUAGE: ts
CODE:
```
const strbool = z.stringbool(); strbool.parse("true") // => true
strbool.parse("1") // => true
strbool.parse("yes") // => true
strbool.parse("on") // => true
strbool.parse("y") // => true
strbool.parse("enabled") // => true strbool.parse("false"); // => false
strbool.parse("0"); // => false
strbool.parse("no"); // => false
strbool.parse("off"); // => false
strbool.parse("n"); // => false
strbool.parse("disabled"); // => false strbool.parse(/* anything else */); // ZodError<[{ code: "invalid_value" }]>
``` ---------------------------------------- TITLE: Chain multiple continuable refinements in Zod
DESCRIPTION: Illustrates how Zod executes all refinement checks by default, even if previous ones fail, allowing multiple validation issues to be collected. This example applies length and lowercase checks.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_105 LANGUAGE: ts
CODE:
```
const myString = z.string() .refine((val) => val.length > 8, { error: "Too short!" }) .refine((val) => val === val.toLowerCase(), { error: "Must be lowercase" }); const result = myString.safeParse("OH NO");
result.error.issues;
/* [ { "code": "custom", "message": "Too short!" }, { "code": "custom", "message": "Must be lowercase" }
] */
``` LANGUAGE: ts
CODE:
```
const myString = z.string().check( z.refine((val) => val.length > 8, { error: "Too short!" }), z.refine((val) => val === val.toLowerCase(), { error: "Must be lowercase" })
); const result = z.safeParse(myString, "OH NO");
result.error.issues;
/* [ { "code": "custom", "message": "Too short!" }, { "code": "custom", "message": "Must be lowercase" }
] */
``` ---------------------------------------- TITLE: Converting Zod Schemas to JSON Schema
DESCRIPTION: Zod 4 introduces `z.toJSONSchema()` for first-party JSON Schema conversion. Any metadata defined using `.meta()` or `.describe()` in `z.globalRegistry` is automatically included in the generated JSON Schema output.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_22 LANGUAGE: ts
CODE:
```
import { z } from "zod/v4"; const mySchema = z.object({name: z.string(), points: z.number()}); z.toJSONSchema(mySchema);
// => {
// type: "object",
// properties: {
// name: {type: "string"},
// points: {type: "number"},
// },
// required: ["name", "points"],
// }
``` LANGUAGE: ts
CODE:
```
const mySchema = z.object({ firstName: z.string().describe("Your first name"), lastName: z.string().meta({ title: "last_name" }), age: z.number().meta({ examples: [12, 99] })
}); z.toJSONSchema(mySchema);
// => {
// type: 'object',
// properties: {
// firstName: { type: 'string', description: 'Your first name' },
// lastName: { type: 'string', title: 'last_name' },
// age: { type: 'number', examples: [ 12, 99 ] }
// },
// required: [ 'firstName', 'lastName', 'age' ]
// }
``` ---------------------------------------- TITLE: General Zod Primitive Coercion Methods
DESCRIPTION: This snippet outlines the general mechanism of Zod's primitive coercion, showing how `z.coerce` uses built-in JavaScript constructors like `String()`, `Number()`, `Boolean()`, `BigInt()`, and `new Date()` to convert input types.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_6 LANGUAGE: ts
CODE:
```
z.coerce.string(); // String(input)
z.coerce.number(); // Number(input)
z.coerce.boolean(); // Boolean(input)
z.coerce.bigint(); // BigInt(input)
z.coerce.date(); // new Date(input)
``` ---------------------------------------- TITLE: Zod Object Schema: Making Properties Required with .required()
DESCRIPTION: The `.required()` method allows you to make all properties of a Zod object schema required, or specify individual properties to enforce as required. This is useful for transforming partial schemas into fully or partially required ones.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_49 LANGUAGE: ts
CODE:
```
const user = z .object({ email: z.string(), username: z.string(), }) .partial();
// { email?: string | undefined; username?: string | undefined }
``` LANGUAGE: ts
CODE:
```
const requiredUser = user.required();
// { email: string; username: string }
``` LANGUAGE: ts
CODE:
```
const requiredEmail = user.required({ email: true,
});
/*
{ email: string; username?: string | undefined;
}
*/
``` ---------------------------------------- TITLE: Infer Input and Output Types for Transformed Zod Schemas
DESCRIPTION: Demonstrates how to independently extract input and output types using `z.input<>` and `z.output<>` when a schema's input and output types diverge, such as with the `.transform()` API. `z.output<>` is equivalent to `z.infer<>`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/zod/README.md#_snippet_9 LANGUAGE: TypeScript
CODE:
```
const mySchema = z.string().transform((val) => val.length); type MySchemaIn = z.input<typeof mySchema>;
// => string type MySchemaOut = z.output<typeof mySchema>; // equivalent to z.infer<typeof mySchema>
// number
``` ---------------------------------------- TITLE: Zod Enum Schema Basic Definition
DESCRIPTION: Shows the fundamental way to define a Zod enum using z.enum() with an array of string values, and how to infer its TypeScript type.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_30 LANGUAGE: ts
CODE:
```
const FishEnum = z.enum(["Salmon", "Tuna", "Trout"]);
type FishEnum = z.infer<typeof FishEnum>;
// 'Salmon' | 'Tuna' | 'Trout'
``` ---------------------------------------- TITLE: Parse data asynchronously with Zod's .parseAsync() method
DESCRIPTION: For schemas using asynchronous APIs like `async` refinements or transforms, use the `.parseAsync()` method. This method also throws a `ZodError` on validation failure.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/basics.mdx#_snippet_2 LANGUAGE: typescript
CODE:
```
const schema = z.string().refine(async (val) => val.length <= 8); await schema.parseAsync("hello");
// => "hello"
``` ---------------------------------------- TITLE: Common Methods of Zod ZodType Base Class (TypeScript)
DESCRIPTION: This snippet lists various methods available on all Zod schema instances, inherited from the 'z.ZodType' base class. It categorizes methods for parsing data, applying refinements, wrapping schemas (e.g., optional, array), adding metadata, and utility functions.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/zod.mdx#_snippet_2 LANGUAGE: TypeScript
CODE:
```
import { z } from "zod/v4"; const mySchema = z.string(); // parsing
mySchema.parse(data);
mySchema.safeParse(data);
mySchema.parseAsync(data);
mySchema.safeParseAsync(data); // refinements
mySchema.refine(refinementFunc);
mySchema.superRefine(refinementFunc); // deprecated, use `.check()`
mySchema.overwrite(overwriteFunc); // wrappers
mySchema.optional();
mySchema.nonoptional();
mySchema.nullable();
mySchema.nullish();
mySchema.default(defaultValue);
mySchema.array();
mySchema.or(otherSchema);
mySchema.transform(transformFunc);
mySchema.catch(catchValue);
mySchema.pipe(otherSchema);
mySchema.readonly(); // metadata and registries
mySchema.register(registry, metadata);
mySchema.describe(description);
mySchema.meta(metadata); // utilities
mySchema.check(checkOrFunction);
mySchema.clone(def);
mySchema.brand<T>();
mySchema.isOptional(); // boolean
mySchema.isNullable(); // boolean
``` ---------------------------------------- TITLE: Parse String Boolean Values with Zod z.stringbool()
DESCRIPTION: Introduces `z.stringbool()` for parsing various string representations of boolean values (e.g., "true", "1", "yes") into actual boolean types. Demonstrates how different string inputs map to `true` or `false`, and how invalid inputs result in a ZodError.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_50 LANGUAGE: ts
CODE:
```
const strbool = z.stringbool(); strbool.parse("true") // => true
strbool.parse("1") // => true
strbool.parse("yes") // => true
strbool.parse("on") // => true
strbool.parse("y") // => true
strbool.parse("enabled") // => true strbool.parse("false"); // => false
strbool.parse("0"); // => false
strbool.parse("no"); // => false
strbool.parse("off"); // => false
strbool.parse("n"); // => false
strbool.parse("disabled"); // => false strbool.parse(/* anything else */); // ZodError<[{ code: "invalid_value" }]>
``` ---------------------------------------- TITLE: Make Specific Fields Optional in Zod Object Schema
DESCRIPTION: Shows how to make only certain properties of a Zod object schema optional. Examples are provided for both standard Zod and Zod Mini, illustrating how to target specific fields.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_74 LANGUAGE: ts
CODE:
```
const RecipeOptionalIngredients = Recipe.partial({ ingredients: true,
});
// { title: string; description?: string | undefined; ingredients?: string[] | undefined }
``` LANGUAGE: ts
CODE:
```
const RecipeOptionalIngredients = z.partial(Recipe, { ingredients: true,
});
// { title: string; description?: string | undefined; ingredients?: string[] | undefined }
``` ---------------------------------------- TITLE: Fix Zod z.enum Variable Array with as const
DESCRIPTION: Shows how to correctly use `z.enum` with a variable array by applying `as const`. This ensures Zod infers the exact literal values, resulting in a union type for the schema.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_45 LANGUAGE: ts
CODE:
```
const fish = ["Salmon", "Tuna", "Trout"] as const; const FishEnum = z.enum(fish);
type FishEnum = z.infer<typeof FishEnum>; // "Salmon" | "Tuna" | "Trout"
``` ---------------------------------------- TITLE: Zod Catch with Dynamic Fallback Function
DESCRIPTION: Demonstrates using `.catch()` with a function to generate a dynamic fallback value upon validation error. The function receives a context object containing error details.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_125 LANGUAGE: TypeScript
CODE:
```
const numberWithRandomCatch = z.number().catch((ctx) => { ctx.error; // the caught ZodError return Math.random();
}); numberWithRandomCatch.parse("sup"); // => 0.4413456736055323
numberWithRandomCatch.parse("sup"); // => 0.1871840107401901
numberWithRandomCatch.parse("sup"); // => 0.7223408162401552
``` LANGUAGE: TypeScript
CODE:
```
const numberWithRandomCatch = z.catch(z.number(), (ctx) => { ctx.value; // the input value ctx.issues; // the caught validation issue return Math.random();
}); z.parse(numberWithRandomCatch, "sup"); // => 0.4413456736055323
z.parse(numberWithRandomCatch, "sup"); // => 0.1871840107401901
z.parse(numberWithRandomCatch, "sup"); // => 0.7223408162401552
``` ---------------------------------------- TITLE: Zod Number-Specific Validations
DESCRIPTION: Provides examples of various number-specific validations in Zod, including greater than, less than, positive/negative checks, and multipleOf. Shows both standard Zod and Zod Mini syntax.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_34 LANGUAGE: ts (Zod)
CODE:
```
z.number().gt(5);
z.number().gte(5); // alias .min(5)
z.number().lt(5);
z.number().lte(5); // alias .max(5)
z.number().positive(); z.number().nonnegative(); z.number().negative(); z.number().nonpositive(); z.number().multipleOf(5); // alias .step(5)
``` LANGUAGE: ts (Zod Mini)
CODE:
```
z.number().check(z.gt(5));
z.number().check(z.gte(5)); // alias .minimum(5)
z.number().check(z.lt(5));
z.number().check(z.lte(5)); // alias .maximum(5)
z.number().check(z.positive()); z.number().check(z.nonnegative()); z.number().check(z.negative()); z.number().check(z.nonpositive()); z.number().check(z.multipleOf(5)); // alias .step(5)
``` ---------------------------------------- TITLE: Handle Zod Parsing Errors with .catch()
DESCRIPTION: The `.catch()` method provides a fallback 'catch value' that is returned if a parsing error occurs. It can accept a static value or a function that generates a value, receiving a `ctx` object with the caught `ZodError`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_102 LANGUAGE: ts
CODE:
```
const numberWithCatch = z.number().catch(42); numberWithCatch.parse(5); // => 5
numberWithCatch.parse("tuna"); // => 42
``` LANGUAGE: ts
CODE:
```
const numberWithRandomCatch = z.number().catch((ctx) => { ctx.error; // the caught ZodError return Math.random();
}); numberWithRandomCatch.parse("sup"); // => 0.4413456736055323
numberWithRandomCatch.parse("sup"); // => 0.1871840107401901
numberWithRandomCatch.parse("sup"); // => 0.7223408162401552
``` ---------------------------------------- TITLE: Customize Error Messages Per-Parse in Zod
DESCRIPTION: Shows how to provide a custom error map directly to the `safeParse` method. This allows for specific error messages based on issue codes like `invalid_type` or `too_small`, overriding global settings.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/error-customization.mdx#_snippet_14 LANGUAGE: ts
CODE:
```
const result = schema.safeParse(12, { error: (iss) => { if (iss.code === "invalid_type") { return `invalid type, expected ${iss.expected}`; } if (iss.code === "too_small") { return `minimum is ${iss.minimum}`; } // ... }
})
``` ---------------------------------------- TITLE: Unify Zod Type and Required Errors with 'error' Function
DESCRIPTION: This snippet illustrates how Zod 4 consolidates 'required_error' and 'invalid_type_error' into a single 'error' function parameter. This function receives an 'issue' object to dynamically determine the appropriate error message based on the validation context, such as 'issue.input === undefined' for required errors.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_35 LANGUAGE: TypeScript
CODE:
```
z.string({ error: (issue) => issue.input === undefined ? "This field is required" : "Not a string" });
``` ---------------------------------------- TITLE: Define Nullish Schema in Zod
DESCRIPTION: Shows how to create a nullish schema in Zod, which makes the schema both optional and nullable. This is achieved using the `z.nullish()` method.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_57 LANGUAGE: ts
CODE:
```
const nullishYoda = z.nullish(z.literal("yoda"));
``` LANGUAGE: zod/v4-mini
CODE:
```
const nullishYoda = z.nullish(z.literal("yoda"));
``` ---------------------------------------- TITLE: Apply basic string length refinement with Zod
DESCRIPTION: Demonstrates how to use `refine()` in Zod and `check(z.refine())` in Zod Mini to add a custom validation rule, ensuring a string's length does not exceed 255 characters.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_103 LANGUAGE: ts
CODE:
```
const myString = z.string().refine((val) => val.length <= 255);
``` LANGUAGE: ts
CODE:
```
const myString = z.string().check(z.refine((val) => val.length <= 255));
``` ---------------------------------------- TITLE: Incorrectly Inferring Zod Schema Type in TypeScript
DESCRIPTION: Shows an initial, incorrect attempt to write a generic function accepting a Zod schema using `z.ZodType<T>`, which loses specific schema subclass information. Includes an example demonstrating the resulting loss of type specificity.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/generic-functions.mdx#_snippet_0 LANGUAGE: TypeScript
CODE:
```
function inferSchema<T>(schema: z.ZodType<T>) { return schema;
}
``` LANGUAGE: TypeScript
CODE:
```
inferSchema(z.string());
// => ZodType<string>
``` ---------------------------------------- TITLE: Zod 'discriminatedUnion' Supports New Schema Types
DESCRIPTION: This snippet demonstrates the enhanced 'z.discriminatedUnion' in Zod 4, which now supports more complex schema types for discriminators, including simple literals, unions ('z.union'), and pipes ('.transform()'). This allows for more flexible and powerful union definitions.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_37 LANGUAGE: TypeScript
CODE:
```
const MyResult = z.discriminatedUnion("status", [ // simple literal z.object({ status: z.literal("aaa"), data: z.string() }), // union discriminator z.object({ status: z.union([z.literal("bbb"), z.literal("ccc")]) }), // pipe discriminator z.object({ status: z.literal("fail").transform(val => val.toUpperCase()) })
]);
``` ---------------------------------------- TITLE: Zod Intersections for Logical AND Types
DESCRIPTION: Demonstrates how to create 'logical AND' types by intersecting two Zod object schemas using `z.intersection` or the `.and()` method. It also shows how intersections work with union types and advises using `.merge()` for object types as it returns a more functional `ZodObject` instance.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_72 LANGUAGE: ts
CODE:
```
const Person = z.object({ name: z.string(),
}); const Employee = z.object({ role: z.string(),
}); const EmployedPerson = z.intersection(Person, Employee); // equivalent to:
const EmployedPerson = Person.and(Employee);
``` LANGUAGE: ts
CODE:
```
const a = z.union([z.number(), z.string()]);
const b = z.union([z.number(), z.boolean()]);
const c = z.intersection(a, b); type c = z.infer<typeof c>; // => number
``` ---------------------------------------- TITLE: Define and Register Interlinked Zod Schemas
DESCRIPTION: This code defines two mutually recursive Zod object schemas, `User` and `Post`, demonstrating how to handle circular dependencies using getter properties. It then registers these schemas with `z.globalRegistry`, assigning unique IDs for later conversion into interlinked JSON Schemas.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/json-schema.mdx#_snippet_27 LANGUAGE: typescript
CODE:
```
import { z } from "zod/v4"; const User = z.object({ name: z.string(), get posts(){ return z.array(Post); }
}); const Post = z.object({ title: z.string(), content: z.string(), get author(){ return User; }
}); z.globalRegistry.add(User, {id: "User"});
z.globalRegistry.add(Post, {id: "Post"});
``` ---------------------------------------- TITLE: Validating File Instances with Zod
DESCRIPTION: Zod 4 introduces `z.file()` for validating `File` instances. This schema type supports methods like `min()` and `max()` for size constraints (in bytes) and `mime()` for specifying allowed MIME types.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_24 LANGUAGE: ts
CODE:
```
const fileSchema = z.file(); fileSchema.min(10_000); // minimum .size (bytes)
fileSchema.max(1_000_000); // maximum .size (bytes)
fileSchema.mime(["image/png"]); // MIME type
``` ---------------------------------------- TITLE: Extend Zod Object Schema using Destructuring
DESCRIPTION: Presents the recommended approach for extending Zod object schemas by destructuring the original schema's `shape` property. This method offers advantages like using language-level features, compatibility with Zod and Zod Mini, better TypeScript performance, and flexibility in strictness levels.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_69 LANGUAGE: ts
CODE:
```
const DogWithBreed = z.object({ ...Dog.shape, breed: z.string(),
});
``` ---------------------------------------- TITLE: Customize Zod error messages using context object (iss)
DESCRIPTION: This example demonstrates how the error map function receives a context object (`iss`) containing details about the validation issue, enabling conditional error messages based on properties like `input`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/error-customization.mdx#_snippet_6 LANGUAGE: ts
CODE:
```
z.string({ error: (iss) => iss.input === undefined ? "Field is required." : "Invalid input."
});
``` ---------------------------------------- TITLE: Compose Zod 'discriminatedUnion' Schemas
DESCRIPTION: This snippet highlights a key improvement in Zod 4 where 'z.discriminatedUnion' schemas can now be composed, meaning one discriminated union can be a member of another. This enables building more complex and modular schema structures, as shown by extending a 'BaseError' schema within a nested discriminated union.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_38 LANGUAGE: TypeScript
CODE:
```
const BaseError = z.object({ status: z.literal("failed"), message: z.string() }); const MyResult = z.discriminatedUnion("status", [ z.object({ status: z.literal("success"), data: z.string() }), z.discriminatedUnion("code", [ BaseError.extend({ code: z.literal(400) }), BaseError.extend({ code: z.literal(401) }), BaseError.extend({ code: z.literal(500) }) ])
]);
``` ---------------------------------------- TITLE: Apply Array-Specific Validations in Zod
DESCRIPTION: Illustrates how to apply common array validations such as minimum length, maximum length, and exact length using Zod's built-in methods. Examples show the syntax for both standard Zod and Zod Mini, highlighting their differences in validation application.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_83 LANGUAGE: ts
CODE:
```
z.array(z.string()).min(5); // must contain 5 or more items
z.array(z.string()).max(5); // must contain 5 or fewer items
z.array(z.string()).length(5); // must contain 5 items exactly
``` LANGUAGE: ts
CODE:
```
z.array(z.string()).check(z.minLength(5)); // must contain 5 or more items
z.array(z.string()).check(z.maxLength(5)); // must contain 5 or fewer items
z.array(z.string()).check(z.length(5)); // must contain 5 items exactly
``` ---------------------------------------- TITLE: Make Zod Object Properties Optional with .partial
DESCRIPTION: Explains how to use the `.partial()` method to make all or selected properties of a Zod object schema optional, similar to TypeScript's `Partial` utility type.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_47 LANGUAGE: typescript
CODE:
```
const user = z.object({ email: z.string(), username: z.string(),
});
// { email: string; username: string }
``` LANGUAGE: typescript
CODE:
```
const partialUser = user.partial();
// { email?: string | undefined; username?: string | undefined }
``` LANGUAGE: typescript
CODE:
```
const optionalEmail = user.partial({ email: true,
});
/*
{ email?: string | undefined; username: string
}*/
``` ---------------------------------------- TITLE: Zod: Chaining `transform` with Schema Methods
DESCRIPTION: Explains the importance of chaining order when using `.transform`. Built-in schema methods (e.g., `.email()`) must be applied before `.transform` because `transform` returns a `ZodEffects` instance, not the original schema type.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_96 LANGUAGE: typescript
CODE:
```
const emailToDomain = z .string() .email() .transform((val) => val.split("@")[1]); emailToDomain.parse("colinhacks@example.com"); // => example.com
``` ---------------------------------------- TITLE: Define Zod Record Schema and Infer Type
DESCRIPTION: Explains how to define a Zod schema for a `Record<string, ValueType>` using `z.record`. It also demonstrates how to infer the TypeScript type from the Zod schema, useful for validating key-value stores.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_66 LANGUAGE: TypeScript
CODE:
```
const User = z.object({ name: z.string() }); const UserStore = z.record(z.string(), User);
type UserStore = z.infer<typeof UserStore>;
// => Record<string, { name: string }>
``` ---------------------------------------- TITLE: Access specific errors from a treeified Zod error
DESCRIPTION: Demonstrates how to access specific error messages from the nested structure returned by `z.treeifyError()`, using optional chaining (`?.`) for safe navigation through properties and array items to retrieve errors at particular paths.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/error-formatting.mdx#_snippet_3 LANGUAGE: ts
CODE:
```
tree.properties?.username?.errors;
// => ["Invalid input: expected string, received number"] tree.properties?.favoriteNumbers?.items?.[1]?.errors;
// => ["Invalid input: expected number, received string"];
``` ---------------------------------------- TITLE: Custom Error Messages for Zod String Validation Methods
DESCRIPTION: Illustrates how to pass a custom error message as a second argument to individual string validation methods like `min`, `max`, `length`, `email`, `url`, `emoji`, `uuid`, `includes`, `startsWith`, `endsWith`, `datetime`, `date`, `time`, `ip`, and `cidr`. This allows for more specific feedback to the user.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_11 LANGUAGE: ts
CODE:
```
z.string().min(5, { message: "Must be 5 or more characters long" });
z.string().max(5, { message: "Must be 5 or fewer characters long" });
z.string().length(5, { message: "Must be exactly 5 characters long" });
z.string().email({ message: "Invalid email address" });
z.string().url({ message: "Invalid url" });
z.string().emoji({ message: "Contains non-emoji characters" });
z.string().uuid({ message: "Invalid UUID" });
z.string().includes("tuna", { message: "Must include tuna" });
z.string().startsWith("https://", { message: "Must provide secure URL" });
z.string().endsWith(".com", { message: "Only .com domains allowed" });
z.string().datetime({ message: "Invalid datetime string! Must be UTC." });
z.string().date({ message: "Invalid date string!" });
z.string().time({ message: "Invalid time string!" });
z.string().ip({ message: "Invalid IP address" });
z.string().cidr({ message: "Invalid CIDR" });
``` ---------------------------------------- TITLE: Define Strict Object Schema in Zod
DESCRIPTION: Demonstrates how to define a strict object schema using `z.strictObject()`. This schema throws an error if any unknown keys are present in the input data, enforcing strict validation.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_63 LANGUAGE: ts
CODE:
```
const StrictDog = z.strictObject({ name: z.string()
}); StrictDog.parse({ name: "Yeller", extraKey: true });
// ❌ throws
``` ---------------------------------------- TITLE: Define Zod Discriminated Union Schema
DESCRIPTION: Demonstrates how to create a Zod schema for a discriminated union using `z.discriminatedUnion`. This method improves parsing efficiency and error reporting by using a specified discriminator key to select the correct sub-schema.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_63 LANGUAGE: TypeScript
CODE:
```
const myUnion = z.discriminatedUnion("status", [ z.object({ status: z.literal("success"), data: z.string() }), z.object({ status: z.literal("failed"), error: z.instanceof(Error) })
]); myUnion.parse({ status: "success", data: "yippie ki yay" });
``` ---------------------------------------- TITLE: Validating Any JSON Value with Zod
DESCRIPTION: Provides a Zod schema snippet for validating any generic JSON value. It uses `z.union`, `z.array`, `z.record`, and `z.lazy` to recursively define a schema that can parse literals, objects, and arrays.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_75 LANGUAGE: ts
CODE:
```
const literalSchema = z.union([z.string(), z.number(), z.boolean(), z.null()]);
type Literal = z.infer<typeof literalSchema>;
type Json = Literal | { [key: string]: Json } | Json[];
const jsonSchema: z.ZodType<Json> = z.lazy(() => z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)])
); jsonSchema.parse(data);
``` ---------------------------------------- TITLE: Omit Specific Keys from Zod Object Schema
DESCRIPTION: Shows how to create a new Zod schema by excluding specified keys from an existing object schema, mirroring TypeScript's `Omit` utility type. Examples are provided for both standard Zod and Zod Mini.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_72 LANGUAGE: ts
CODE:
```
const RecipeNoId = Recipe.omit({ id: true });
``` LANGUAGE: ts
CODE:
```
const RecipeNoId = z.omit(Recipe, { id: true });
``` ---------------------------------------- TITLE: Define Nullable Schema in Zod
DESCRIPTION: Demonstrates how to create a nullable schema in Zod, allowing `null` inputs. It shows both the `z.nullable()` method and the chainable `.nullable()` method for different Zod versions.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_55 LANGUAGE: ts
CODE:
```
z.nullable(z.literal("yoda")); // or z.literal("yoda").nullable()
``` LANGUAGE: zod/v4-mini
CODE:
```
const nullableYoda = z.nullable(z.literal("yoda"));
``` ---------------------------------------- TITLE: Zod Array Schema: Specifying Array Length Constraints
DESCRIPTION: Zod provides methods to enforce specific length constraints on array schemas. Use `.min()` for a minimum number of items, `.max()` for a maximum, and `.length()` for an exact number of items. These methods do not change the inferred type of the array.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_56 LANGUAGE: ts
CODE:
```
z.string().array().min(5); // must contain 5 or more items
z.string().array().max(5); // must contain 5 or fewer items
z.string().array().length(5); // must contain 5 items exactly
``` ---------------------------------------- TITLE: Discriminate Zod issue types using the 'code' property
DESCRIPTION: This example demonstrates how the `iss` object is a discriminated union, allowing developers to use the `code` property to differentiate between various issue types (e.g., `invalid_type`, `too_small`) and provide tailored error messages accordingly.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/error-customization.mdx#_snippet_12 LANGUAGE: ts
CODE:
```
const result = schema.safeParse(12, { error: (iss) => { if (iss.code === "invalid_type") { return `invalid type, expected ${iss.expected}`; } if (iss.code === "too_small") { return `minimum is ${iss.minimum}`; } // ... }
});
``` ---------------------------------------- TITLE: Customize Zod min error message with specific issue properties
DESCRIPTION: This example shows how to customize an error message for a `min` validation by accessing specific properties like `minimum` and `inclusive` from the `iss` object to provide a more informative message.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/error-customization.mdx#_snippet_8 LANGUAGE: ts
CODE:
```
z.string().min(5, { error: (iss) => { // ...the same as above iss.minimum; // the minimum value iss.inclusive; // whether the minimum is inclusive return `Password must have ${iss.minimum} characters or more`; }
});
``` ---------------------------------------- TITLE: Pick and Omit Keys from Zod Object Schemas
DESCRIPTION: Demonstrates how to create new Zod object schemas by either picking specific keys with `.pick()` or omitting keys with `.omit()`, similar to TypeScript's utility types.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_46 LANGUAGE: typescript
CODE:
```
const Recipe = z.object({ id: z.string(), name: z.string(), ingredients: z.array(z.string()),
});
``` LANGUAGE: typescript
CODE:
```
const JustTheName = Recipe.pick({ name: true });
type JustTheName = z.infer<typeof JustTheName>;
// => { name: string }
``` LANGUAGE: typescript
CODE:
```
const NoIDRecipe = Recipe.omit({ id: true }); type NoIDRecipe = z.infer<typeof NoIDRecipe>;
// => { name: string, ingredients: string[] }
``` ---------------------------------------- TITLE: Asynchronous Data Parsing with Zod
DESCRIPTION: Demonstrates the use of the `.parseAsync()` method, which is required when a Zod schema incorporates asynchronous operations like `async` refinements or transforms. This ensures proper validation for data processed with asynchronous logic.
SOURCE: https://github.com/colinhacks/zod/blob/main/README.md#_snippet_4 LANGUAGE: typescript
CODE:
```
const schema = z.string().refine(async (val) => val.length <= 8); await schema.parseAsync("hello");
// => "hello"
``` ---------------------------------------- TITLE: Make All Fields Required in Zod Object Schema
DESCRIPTION: Illustrates how to make all properties of a Zod object schema required, similar to TypeScript's `Required` utility type. Examples are provided for both standard Zod and Zod Mini, showing the resulting schema type.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_75 LANGUAGE: ts
CODE:
```
const RequiredRecipe = Recipe.required();
// { title: string; description: string; ingredients: string[] }
``` LANGUAGE: ts
CODE:
```
const RequiredRecipe = z.required(Recipe);
// { title: string; description: string; ingredients: string[] }
``` ---------------------------------------- TITLE: Define Zod Literal Schemas
DESCRIPTION: This snippet shows how to create literal schemas in Zod for specific primitive values like strings, numbers, bigints, booleans, and symbols. It also demonstrates how to retrieve the literal value from the schema.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_8 LANGUAGE: ts
CODE:
```
const tuna = z.literal("tuna");
const twelve = z.literal(12);
const twobig = z.literal(2n); // bigint literal
const tru = z.literal(true); const terrificSymbol = Symbol("terrific");
const terrific = z.literal(terrificSymbol); // retrieve literal value
tuna.value; // "tuna"
``` ---------------------------------------- TITLE: Apply object-based error messages to various Zod schema types
DESCRIPTION: This example demonstrates an alternative syntax for providing custom error messages using an object with an `error` property, applicable across different Zod schema types and methods for both Zod and Zod Mini.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/error-customization.mdx#_snippet_4 LANGUAGE: ts
CODE:
```
z.string({ error: "Bad!" });
z.string().min(5, { error: "Too short!" });
z.uuid({ error: "Bad UUID!" });
z.iso.date({ error: "Bad date!" });
z.array(z.string(), { error: "Bad array!" });
z.array(z.string()).min(5, { error: "Too few items!" });
z.set(z.string(), { error: "Bad set!" });
``` LANGUAGE: ts
CODE:
```
z.string({ error: "Bad!" });
z.string().check(z.minLength(5, { error: "Too short!" }));
z.uuid({ error: "Bad UUID!" });
z.iso.date({ error: "Bad date!" });
z.array(z.string(), { error: "Bad array!" });
z.array(z.string()).check(z.minLength(5, { error: "Too few items!" }));
z.set(z.string(), { error: "Bad set!" });
``` ---------------------------------------- TITLE: Customize refinement error messages in Zod
DESCRIPTION: Shows how to provide a custom error message for a refinement failure using the `error` option, making validation feedback more specific.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_104 LANGUAGE: ts
CODE:
```
const myString = z.string().refine((val) => val.length > 8, { error: "Too short!"
});
``` LANGUAGE: ts
CODE:
```
const myString = z.string().check( z.refine((val) => val.length > 8, { error: "Too short!" })
);
``` ---------------------------------------- TITLE: Zod Prefault with Mutating Refinements
DESCRIPTION: Illustrates how `prefault` allows an `undefined` input to pass through subsequent mutating refinements like `trim()` and `toUpperCase()`, unlike `default` which bypasses them.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_123 LANGUAGE: TypeScript
CODE:
```
const a = z.string().trim().toUpperCase().prefault(" tuna ");
a.parse(undefined); // => "TUNA" const b = z.string().trim().toUpperCase().default(" tuna ");
b.parse(undefined); // => " tuna "
``` ---------------------------------------- TITLE: Zod safeParseAsync Method for Asynchronous Validation
DESCRIPTION: The .safeParseAsync method provides an asynchronous version of .safeParse, useful for validations that require async operations. It is also aliased as .spa for convenience.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_90 LANGUAGE: TypeScript
CODE:
```
await stringSchema.safeParseAsync("billie");
``` LANGUAGE: APIDOC
CODE:
```
Alias: .spa
``` LANGUAGE: TypeScript
CODE:
```
await stringSchema.spa("billie");
``` ---------------------------------------- TITLE: Generate human-readable Zod error string with z.prettifyError()
DESCRIPTION: Illustrates the use of `z.prettifyError()` to obtain a concise, human-readable string representation of a Zod error, useful for displaying validation messages directly to users. The resulting string format is:
✖ Unrecognized key: "extraKey"
✖ Invalid input: expected string, received number → at username
✖ Invalid input: expected number, received string → at favoriteNumbers[1]
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/error-formatting.mdx#_snippet_4 LANGUAGE: ts
CODE:
```
const pretty = z.prettifyError(result.error);
``` ---------------------------------------- TITLE: Zod Template Literal Type Definition
DESCRIPTION: Demonstrates the new `z.templateLiteral()` API, which allows defining complex string types using TypeScript's template literal syntax. This feature enables Zod to represent and enforce patterns that combine literal strings with other Zod schema types, such as numbers or refined strings.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_29 LANGUAGE: ts
CODE:
```
const hello = z.templateLiteral(["hello, ", z.string()]);
// `hello, ${string}` const cssUnits = z.enum(["px", "em", "rem", "%"]);
const css = z.templateLiteral([z.number(), cssUnits]);
// `${number}px` | `${number}em` | `${number}rem` | `${number}%` const email = z.templateLiteral([ z.string().min(1), "@", z.string().max(64),
]);
// `${string}@${string}` (the min/max refinements are enforced!)
``` ---------------------------------------- TITLE: Zod Object Schema: Validating Unknown Keys with .catchall()
DESCRIPTION: The `.catchall()` method allows you to define a schema that all unknown keys in an object will be validated against. This effectively makes all keys 'known' and prevents stripping or errors, ensuring all properties conform to a specified type.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_52 LANGUAGE: ts
CODE:
```
const person = z .object({ name: z.string(), }) .catchall(z.number()); person.parse({ name: "bob dylan", validExtraKey: 61, // works fine
}); person.parse({ name: "bob dylan", validExtraKey: false, // fails
});
// => throws ZodError
``` ---------------------------------------- TITLE: Define Zod Template Literal Schema
DESCRIPTION: Illustrates how to create a template literal schema using `z.templateLiteral` to combine string literals and other Zod schemas. This feature is new in Zod 4.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_31 LANGUAGE: ts
CODE:
```
const schema = z.templateLiteral([ "hello, ", z.string(), "!" ]);
// `hello, ${string}!`
``` ---------------------------------------- TITLE: Create Zod Enum from Object Keys with .keyof
DESCRIPTION: Demonstrates the `.keyof()` method, which generates a `ZodEnum` schema containing the keys of an existing object schema.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_43 LANGUAGE: typescript
CODE:
```
const keySchema = Dog.keyof();
keySchema; // ZodEnum<["name", "age"]>
``` ---------------------------------------- TITLE: Zod Transform: Custom Validation with Context
DESCRIPTION: Illustrates how to perform validation logic within a transform using the `ctx` object. It shows how to parse a value to an integer and report a custom validation issue if parsing fails by pushing to `ctx.issues`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_115 LANGUAGE: ts
CODE:
```
const coercedInt = z.transform((val, ctx) => { try { const parsed = Number.parseInt(String(val)); return parsed; } catch (e) { ctx.issues.push({ code: "custom", message: "Not a number", input: val, }); // this is a special constant with type `never` // returning it lets you exit the transform without impacting the inferred return type return z.NEVER; }
});
``` ---------------------------------------- TITLE: Define a Zod schema for strict Web URL validation
DESCRIPTION: Provides a recommended Zod schema for validating Web URLs specifically, restricting protocols to `http` or `https` and ensuring the hostname is a valid domain name using `z.regexes.domain`. This offers a more robust validation for typical web addresses.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_20 LANGUAGE: ts
CODE:
```
const httpUrl = z.url({ protocol: /^https?$/, hostname: z.regexes.domain
});
``` ---------------------------------------- TITLE: Parse Data with Zod Coercion String Schema
DESCRIPTION: Shows an example of parsing various input types using a `z.coerce.string()` schema, demonstrating how different values are converted to their string representation.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_2 LANGUAGE: ts
CODE:
```
const schema = z.coerce.string(); schema.parse("tuna"); // => "tuna"
schema.parse(42); // => "42"
schema.parse(true); // => "true"
schema.parse(null); // => "null"
``` ---------------------------------------- TITLE: Configure Global Error Map in Zod
DESCRIPTION: Demonstrates how to set a global custom error map using `z.config()` in Zod. This error map has lower precedence than schema-level or per-parse errors. The `iss` object provides details about the issue, allowing discrimination by `code`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/error-customization.mdx#_snippet_13 LANGUAGE: ts
CODE:
```
z.config({ customError: (iss) => { return "globally modified error"; }
});
``` ---------------------------------------- TITLE: Customize Email Validation Regex in Zod
DESCRIPTION: Illustrates how to customize the email validation behavior in Zod by passing a custom regular expression to the `pattern` parameter of the `z.email()` method.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_12 LANGUAGE: ts
CODE:
```
z.email({ pattern: /your regex here/ });
``` ---------------------------------------- TITLE: Utilize Zod's Predefined Email Regexes
DESCRIPTION: Shows how to use Zod's exported regular expressions for email validation, including the default, HTML5, RFC 5322, and Unicode-friendly patterns, by passing them to the `pattern` option.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_13 LANGUAGE: ts
CODE:
```
// Zod's default email regex
z.email();
z.email({ pattern: z.regexes.email }); // equivalent // the regex used by browsers to validate input[type=email] fields
// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email
z.email({ pattern: z.regexes.html5Email }); // the classic emailregex.com regex (RFC 5322)
z.email({ pattern: z.regexes.rfc5322Email }); // a loose regex that allows Unicode (good for intl emails)
z.email({ pattern: z.regexes.unicodeEmail });
``` ---------------------------------------- TITLE: Zod Enum Schema Invalid Definition Example
DESCRIPTION: Illustrates an incorrect way to define a Zod enum by passing a mutable array, which prevents Zod from inferring the exact values.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_32 LANGUAGE: ts
CODE:
```
const fish = ["Salmon", "Tuna", "Trout"];
const FishEnum = z.enum(fish);
``` ---------------------------------------- TITLE: Implement a Zod Function Schema with Automatic Validation
DESCRIPTION: Shows how to use the `.implement()` method on a Zod function schema to create a new function that automatically validates its inputs and outputs based on the schema definition.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_138 LANGUAGE: ts
CODE:
```
const computeTrimmedLength = MyFunction.implement((input) => { // TypeScript knows input is a string! return input.trim().length;
}); computeTrimmedLength("sandwich"); // => 8
computeTrimmedLength(" asdf "); // => 4
``` ---------------------------------------- TITLE: Zod to JSON Schema: Extracting Reused Schemas with $ref
DESCRIPTION: Shows how to use the `reused: "ref"` option with `z.toJSONSchema` to extract common schemas into the `$defs` section and reference them using `$ref`, promoting schema reusability.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/json-schema.mdx#_snippet_23 LANGUAGE: typescript
CODE:
```
z.toJSONSchema(User, { reused: "ref" });
// => {
// type: 'object',
// properties: {
// firstName: { '$ref': '#/$defs/__schema0' },
// lastName: { '$ref': '#/$defs/__schema0' }
// },
// required: [ 'firstName', 'lastName' ],
// additionalProperties: false,
// '$defs': { __schema0: { type: 'string' } }
// }
``` ---------------------------------------- TITLE: Convert Zod Global Registry to Interlinked JSON Schema
DESCRIPTION: This snippet shows how to convert all schemas registered in `z.globalRegistry` into a single JSON Schema object. The output includes a `schemas` property containing each registered schema, with `$ref` properties used for inter-schema referencing based on their registered IDs.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/json-schema.mdx#_snippet_28 LANGUAGE: typescript
CODE:
```
z.toJSONSchema(z.globalRegistry);
// => {
// schemas: {
// User: {
// id: 'User',
// type: 'object',
// properties: {
// name: { type: 'string' },
// posts: { type: 'array', items: { '$ref': 'Post' } }
// },
// required: [ 'name', 'posts' ],
// additionalProperties: false,
// },
// Post: {
// id: 'Post',
// type: 'object',
// properties: {
// title: { type: 'string' },
// content: { type: 'string' },
// author: { '$ref': 'User' }
// },
// required: [ 'title', 'content', 'author' ],
// additionalProperties: false,
// }
// }
// }
``` ---------------------------------------- TITLE: Zod: Narrowing Types with `superRefine` Type Predicates
DESCRIPTION: Illustrates the use of a TypeScript type predicate within `.refine()` or `.superRefine()` to narrow down the inferred type of the schema. This is particularly useful when chaining multiple refinements and transformations, ensuring type safety after validation.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_94 LANGUAGE: typescript
CODE:
```
const schema = z .object({ first: z.string(), second: z.number(), }) .nullable() .superRefine((arg, ctx): arg is { first: string; second: number } => { if (!arg) { ctx.addIssue({ code: z.ZodIssueCode.custom, // customize your issue message: "object should exist", }); } return z.NEVER; // The return value is not used, but we need to return something to satisfy the typing }) // here, TS knows that arg is not null .refine((arg) => arg.first === "bob", "`first` is not `bob`!");
``` ---------------------------------------- TITLE: Zod 'overwrite()' Method for Type-Preserving Transformations
DESCRIPTION: This snippet introduces Zod 4's new '.overwrite()' method, designed for transformations that do not change the inferred type of the schema. Unlike '.transform()', '.overwrite()' returns an instance of the original class, making the output type introspectable at runtime and compatible with JSON Schema conversion.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_42 LANGUAGE: TypeScript
CODE:
```
z.number().overwrite(val => val ** 2).max(100);
// => ZodNumber
``` ---------------------------------------- TITLE: Zod Array Schema: Ensuring Non-Empty Arrays with .nonempty()
DESCRIPTION: The `.nonempty()` method ensures that a Zod array schema will contain at least one element. If an empty array is parsed, it will throw an error. You can also provide a custom error message for better feedback.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_55 LANGUAGE: ts
CODE:
```
const nonEmptyStrings = z.string().array().nonempty();
// the inferred type is now
// [string, ...string[]] nonEmptyStrings.parse([]); // throws: "Array cannot be empty"
nonEmptyStrings.parse(["Ariana Grande"]); // passes
``` LANGUAGE: ts
CODE:
```
// optional custom error message
const nonEmptyStrings = z.string().array().nonempty({ message: "Can't be empty!",
});
``` ---------------------------------------- TITLE: Convert Zod Object Schema to JSON Schema
DESCRIPTION: Demonstrates the basic usage of `z.toJSONSchema()` to convert a simple Zod object schema into its corresponding JSON Schema representation, showing how properties, types, and required fields are mapped.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/json-schema.mdx#_snippet_0 LANGUAGE: TypeScript
CODE:
```
import { z } from "zod/v4"; const schema = z.object({ name: z.string(), age: z.number(),
}); z.toJSONSchema(schema)
// => {
// type: 'object',
// properties: { name: { type: 'string' }, age: { type: 'number' } },
// required: [ 'name', 'age' ],
// additionalProperties: false,
// }
``` ---------------------------------------- TITLE: Make Specific Fields Required in Zod Object Schema
DESCRIPTION: Shows how to make only certain properties of a Zod object schema required. Examples are provided for both standard Zod and Zod Mini, illustrating how to target specific fields.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_76 LANGUAGE: ts
CODE:
```
const RecipeRequiredDescription = Recipe.required({description: true});
// { title: string; description: string; ingredients: string[] }
``` LANGUAGE: ts
CODE:
```
const RecipeRequiredDescription = z.required(Recipe, {description: true});
// { title: string; description: string; ingredients: string[] }
``` ---------------------------------------- TITLE: Parse a Zod schema and observe a custom error message
DESCRIPTION: This example shows the result of parsing an invalid input against a schema with a custom error message. The custom message is visible in the `message` property of the `ZodError` issue.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/error-customization.mdx#_snippet_2 LANGUAGE: ts
CODE:
```
z.string("Not a string!").parse(12);
// ❌ throws ZodError {
// issues: [
// {
// expected: 'string',
// code: 'invalid_type',
// path: [],
// message: 'Not a string!' <-- 👀 custom error message
// }
// ]
// }
``` ---------------------------------------- TITLE: Apply Basic String Transformations with Zod
DESCRIPTION: Illustrates common string transformation methods provided by Zod and Zod Mini. These include trimming whitespace and converting string case to lowercase or uppercase.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_8 LANGUAGE: ts
CODE:
```
z.string().trim(); // trim whitespace
z.string().toLowerCase(); // toLowerCase
z.string().toUpperCase(); // toUpperCase
``` LANGUAGE: ts
CODE:
```
z.string().check(z.trim()); // trim whitespace
z.string().check(z.toLowerCase()); // toLowerCase
z.string().check(z.toUpperCase()); // toUpperCase
``` ---------------------------------------- TITLE: Using Zod .spa Alias for safeParseAsync (TypeScript)
DESCRIPTION: Demonstrates the convenient alias .spa() for the .safeParseAsync() method. It performs the same asynchronous safe parsing operation but provides a shorter syntax.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/parsing.mdx#_snippet_5 LANGUAGE: TypeScript
CODE:
```
await stringSchema.spa("billie");
``` ---------------------------------------- TITLE: Chain Zod Schemas for Validation Pipelines with .pipe()
DESCRIPTION: The `.pipe()` method allows chaining Zod schemas to create validation pipelines. This is particularly useful for applying further validation to the result of a `.transform()` operation, returning a `ZodPipeline` instance.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_112 LANGUAGE: ts
CODE:
```
z.string() .transform((val) => val.length) .pipe(z.number().min(5));
``` ---------------------------------------- TITLE: Zod Catch for Fixed Fallback Value on Error
DESCRIPTION: Shows how to use `.catch()` to provide a fixed fallback value when a Zod schema validation fails. This ensures a default value is returned instead of an error.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_124 LANGUAGE: TypeScript
CODE:
```
const numberWithCatch = z.number().catch(42); numberWithCatch.parse(5); // => 5
numberWithCatch.parse("tuna"); // => 42
``` LANGUAGE: TypeScript
CODE:
```
const numberWithCatch = z.catch(z.number(), 42); numberWithCatch.parse(5); // => 5
numberWithCatch.parse("tuna"); // => 42
``` ---------------------------------------- TITLE: Define a Zod Function Schema with Input and Output Types
DESCRIPTION: Demonstrates how to define a Zod function schema using `z.function()`, specifying both the input parameters (as an array or ZodTuple) and the expected return type.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_137 LANGUAGE: ts
CODE:
```
const MyFunction = z.function({ input: [z.string()], // parameters (must be an array or a ZodTuple) output: z.number() // return type
});
``` ---------------------------------------- TITLE: Define a Zod schema with a dynamic error message function (error map)
DESCRIPTION: This snippet shows how to pass a function to the `error` parameter. This function, known as an error map, runs at parse time and allows for dynamic generation of error messages.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/error-customization.mdx#_snippet_5 LANGUAGE: ts
CODE:
```
z.string({ error: ()=>`[${Date.now()}]: Validation failure.` });
``` ---------------------------------------- TITLE: Handle ZodError for Invalid Function Input
DESCRIPTION: Illustrates that a Zod-validated function implemented with `.implement()` will throw a `ZodError` if the provided input does not conform to the defined input schema.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_139 LANGUAGE: ts
CODE:
```
computeTrimmedLength(42); // throws ZodError
``` ---------------------------------------- TITLE: Compare Zod Mini Functional API with Zod Method Chaining
DESCRIPTION: Demonstrates the difference in API style between `zod/v4-mini` (functional wrappers) and `zod/v4` (method chaining) for common operations like optional, union, and extend.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_12 LANGUAGE: ts
CODE:
```
import { z } from "zod/v4-mini"; z.optional(z.string()); z.union([z.string(), z.number()]); z.extend(z.object({ /* ... */ }), { age: z.number() });
``` LANGUAGE: ts
CODE:
```
import { z } from "zod/v4"; z.string().optional(); z.string().or(z.number()); z.object({ /* ... */ }).extend({ age: z.number() });
``` ---------------------------------------- TITLE: Applying Schema Checks (Zod Mini vs Standard Zod)
DESCRIPTION: Illustrates the difference in applying checks like min/max length, regex, and refinements. Standard Zod uses method chaining, while Zod Mini uses the `.check()` method with check functions.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/mini.mdx#_snippet_3 LANGUAGE: ts
CODE:
```
import { z } from "zod/v4"; z.string() .min(5) .max(10) .refine(val => val.includes("@")) .trim()
``` LANGUAGE: ts
CODE:
```
import { z } from "zod/v4-mini" z.string().check( z.minLength(5), z.maxLength(10), z.refine(val => val.includes("@")), z.trim()
);
``` ---------------------------------------- TITLE: Zod Enum Schema Definition with `as const`
DESCRIPTION: Demonstrates defining a Zod enum by passing a const asserted tuple of string values to z.enum(), which is a recommended practice for type safety.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_31 LANGUAGE: ts
CODE:
```
const VALUES = ["Salmon", "Tuna", "Trout"] as const;
const FishEnum = z.enum(VALUES);
``` ---------------------------------------- TITLE: Customize Error Messages for Zod Custom Schemas
DESCRIPTION: Explains how to provide a custom error message or options as a second argument to `z.custom()` for more specific validation feedback.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_136 LANGUAGE: ts
CODE:
```
z.custom<...>((val) => ..., "custom error message");
``` ---------------------------------------- TITLE: Zod Object Schema: Passing Through Unknown Keys with .passthrough()
DESCRIPTION: By default, Zod object schemas strip out unrecognized keys during parsing. The `.passthrough()` method modifies this behavior, allowing unknown keys to be included in the parsed output instead of being removed.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_50 LANGUAGE: ts
CODE:
```
const person = z.object({ name: z.string(),
}); person.parse({ name: "bob dylan", extraKey: 61,
});
// => { name: "bob dylan" }
// extraKey has been stripped
``` LANGUAGE: ts
CODE:
```
person.passthrough().parse({ name: "bob dylan", extraKey: 61,
});
// => { name: "bob dylan", extraKey: 61 }
``` ---------------------------------------- TITLE: Define Loose Object Schema in Zod
DESCRIPTION: Illustrates how to define a loose object schema using `z.looseObject()`. This schema allows unknown keys to pass through without stripping them, providing more flexible validation.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_64 LANGUAGE: ts
CODE:
```
const LooseDog = z.looseObject({ name: z.string()
}); Dog.parse({ name: "Yeller", extraKey: true });
// => { name: "Yeller", extraKey: true }
``` ---------------------------------------- TITLE: Zod Preprocess: Transforming Input Before Schema Validation
DESCRIPTION: Explains the `z.preprocess()` function, which allows transforming input data before it is passed to the main schema for validation. This is useful for coercing types, such as parsing a string to an integer before Zod's integer validation.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_119 LANGUAGE: ts
CODE:
```
const coercedInt = z.preprocess((val) => { if (typeof val === "string") { return Number.parseInt(val); } return val;
}, z.int());
``` ---------------------------------------- TITLE: Apply Preprocessing to Zod Schema Input
DESCRIPTION: This snippet illustrates the use of `z.preprocess()` to apply a transformation to the input value *before* Zod's parsing and validation logic. It's commonly used for type coercion, such as casting any value to a string before validating it as a string.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_83 LANGUAGE: ts
CODE:
```
const castToString = z.preprocess((val) => String(val), z.string());
``` ---------------------------------------- TITLE: Customize error path for object refinements in Zod
DESCRIPTION: Demonstrates how to use the `path` option within `refine()` to specify where the validation error should appear in the error object, useful for form validation like password confirmation.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_107 LANGUAGE: ts
CODE:
```
const passwordForm = z .object({ password: z.string(), confirm: z.string(), }) .refine((data) => data.password === data.confirm, { message: "Passwords don't match", path: ["confirm"], // path of error });
``` LANGUAGE: ts
CODE:
```
const passwordForm = z .object({ password: z.string(), confirm: z.string(), }) .check(z.refine((data) => data.password === data.confirm, { message: "Passwords don't match", path: ["confirm"], // path of error }));
``` ---------------------------------------- TITLE: Define Zod Union Type with .or Method
DESCRIPTION: Illustrates a more concise way to define a union type using the `.or` method, which chains directly from an existing schema. This provides syntactic sugar for `z.union`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_60 LANGUAGE: TypeScript
CODE:
```
const stringOrNumber = z.string().or(z.number());
``` ---------------------------------------- TITLE: Adding Metadata to Zod Schemas with .meta()
DESCRIPTION: The `.meta()` method allows convenient addition of schema metadata to `z.globalRegistry`. Unlike `.register()`, `.meta()` is immutable, returning a new schema instance. It is the preferred method over `.describe()` for adding descriptions and other metadata.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_21 LANGUAGE: ts
CODE:
```
z.string().meta({ id: "email_address", title: "Email address", description: "Provide your email", examples: ["naomie@example.com"], // ...
});
``` LANGUAGE: ts
CODE:
```
z.string().describe("An email address"); // equivalent to
z.string().meta({ description: "An email address" });
``` ---------------------------------------- TITLE: Zod Transform: Combining with Pipes
DESCRIPTION: Shows how transforms can be used in conjunction with Zod's `pipe` method. This example demonstrates chaining a string schema with a transform to calculate the length of the string, applicable for both Zod and Zod Mini.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_116 LANGUAGE: ts
CODE:
```
const stringToLength = z.string().pipe(z.transform(val => val.length)); stringToLength.parse("hello"); // => 5
``` LANGUAGE: ts
CODE:
```
const stringToLength = z.pipe(z.string(), z.transform(val => val.length)); z.parse(stringToLength, "hello"); // => 5
``` ---------------------------------------- TITLE: Define and Parse a Zod Set Schema
DESCRIPTION: This example shows how to define a Zod schema for a `Set` object, specifying the type of its elements. It demonstrates creating a `Set` instance, adding elements, and then parsing it against the defined schema.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_98 LANGUAGE: ts
CODE:
```
const NumberSet = z.set(z.number());
type NumberSet = z.infer<typeof NumberSet>; // Set<number> const mySet: NumberSet = new Set();
mySet.add(1);
mySet.add(2);
NumberSet.parse(mySet);
``` ---------------------------------------- TITLE: Validate ISO 8601 date strings with Zod
DESCRIPTION: Explains how `z.iso.date()` validates strings strictly in `YYYY-MM-DD` format, ensuring correct month and day ranges.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_25 LANGUAGE: ts
CODE:
```
const date = z.iso.date(); date.parse("2020-01-01"); // ✅
date.parse("2020-1-1"); // ❌
date.parse("2020-01-32"); // ❌
``` ---------------------------------------- TITLE: Validate File Instances with Zod File Schema and Constraints
DESCRIPTION: This snippet shows how to validate `File` instances using `z.file()` and apply constraints such as minimum/maximum size and MIME type. It demonstrates the differences in applying these constraints between standard Zod and Zod Mini.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_100 LANGUAGE: ts
CODE:
```
const fileSchema = z.file(); fileSchema.min(10_000); // minimum .size (bytes)
fileSchema.max(1_000_000); // maximum .size (bytes)
fileSchema.mime(["image/png"]); // MIME type
``` LANGUAGE: ts
CODE:
```
const fileSchema = z.file(); fileSchema.check( z.minSize(10_000), // minimum .size (bytes) z.maxSize(1_000_000), // maximum .size (bytes) z.mime(["image/png"]); // MIME type
)
``` ---------------------------------------- TITLE: Validating Class Instances with Zod's `z.instanceof()`
DESCRIPTION: Illustrates the use of `z.instanceof()` to validate whether an input is an instance of a specific JavaScript/TypeScript class. This method is particularly useful for validating objects against classes imported from third-party libraries.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_102 LANGUAGE: ts
CODE:
```
class Test { name: string;
} const TestSchema = z.instanceof(Test); TestSchema.parse(new Test()); // ✅
TestSchema.parse("whatever"); // ❌
``` ---------------------------------------- TITLE: Zod 4: Deprecation of `z.nativeEnum()` and New `z.enum()` Usage
DESCRIPTION: Illustrates the deprecation of `z.nativeEnum()` in Zod 4. The `z.enum()` API now supports direct enum-like inputs, providing a more streamlined way to define enum schemas.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/changelog.mdx#_snippet_24 LANGUAGE: typescript
CODE:
```
enum Color { Red = "red", Green = "green", Blue = "blue",
} const ColorSchema = z.enum(Color); // ✅
``` ---------------------------------------- TITLE: Define a Zod Record Schema with Enum Keys for Exhaustive Checking
DESCRIPTION: This snippet shows how to define a Zod record schema where keys are derived from a `z.enum`. In Zod 4, this setup ensures that all enum values must be present as keys in the parsed object, aligning with TypeScript's exhaustive checking for `Record` types.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_95 LANGUAGE: ts
CODE:
```
const Keys = z.enum(["id", "name", "email"]);
const Person = z.record(Keys, z.string());
// { id: string; name: string; email: string }
``` ---------------------------------------- TITLE: Validate any WHATWG-compatible URL with Zod
DESCRIPTION: Demonstrates the basic `z.url()` schema for validating URLs according to WHATWG standards. It's permissive, using the `new URL()` constructor internally, and accepts various URL schemes including `http`, `https`, and `mailto`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_17 LANGUAGE: ts
CODE:
```
const schema = z.url(); schema.parse("https://example.com"); // ✅
schema.parse("http://localhost"); // ✅
schema.parse("mailto:noreply@zod.dev"); // ✅
schema.parse("sup"); // ✅
``` ---------------------------------------- TITLE: Zod Object Schema Stripping Unrecognized Keys
DESCRIPTION: Explains the default behavior of Zod object schemas, where unrecognized keys are automatically stripped from the parsed result, ensuring only defined properties are returned.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_62 LANGUAGE: ts
CODE:
```
Dog.parse({ name: "Yeller", extraKey: true });
// => { name: "Yeller" }
``` ---------------------------------------- TITLE: Customize Truthy and Falsy Values for Zod z.stringbool()
DESCRIPTION: Shows how to customize the set of string values that `z.stringbool()` considers `truthy` or `falsy` by providing arrays of custom strings during schema definition.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_51 LANGUAGE: ts
CODE:
```
// these are the defaults
z.stringbool({ truthy: ["true", "1", "yes", "on", "y", "enabled"], falsy: ["false", "0", "no", "off", "n", "disabled"]
});
``` ---------------------------------------- TITLE: Correctly Inferring Zod Schema Type with ZodTypeAny
DESCRIPTION: Presents the recommended approach for writing generic functions that accept Zod schemas by using `T extends z.ZodTypeAny`, which preserves the specific schema subclass type information. Includes an example showing the correct type inference.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/generic-functions.mdx#_snippet_1 LANGUAGE: TypeScript
CODE:
```
function inferSchema<T extends z.ZodTypeAny>(schema: T) { return schema;
}
``` LANGUAGE: TypeScript
CODE:
```
inferSchema(z.string());
// => ZodString
``` ---------------------------------------- TITLE: Zod: Interleaving Transforms and Refinements
DESCRIPTION: Illustrates that `.transform` and `.refine` methods can be freely interleaved within a schema chain. They will be executed sequentially in the order they are declared.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_98 LANGUAGE: typescript
CODE:
```
const nameToGreeting = z .string() .transform((val) => val.toUpperCase()) .refine((val) => val.length > 15) .transform((val) => `Hello ${val}`) .refine((val) => val.indexOf("!") === -1);
``` ---------------------------------------- TITLE: Customize Zod errors on a per-parse basis
DESCRIPTION: This example shows how to provide an error map directly to the `parse` method, allowing for error customization specific to a single parsing operation rather than the schema definition.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/error-customization.mdx#_snippet_10 LANGUAGE: ts
CODE:
```
const schema = z.string(); schema.parse(12, { error: iss => "per-parse custom error"
});
``` ---------------------------------------- TITLE: Zod Defaults: Generating Dynamic Default Values
DESCRIPTION: Shows how to provide a function to `.default()` to generate a dynamic default value each time it's needed. This is useful for values like random numbers or timestamps that should be unique per parsing operation.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_121 LANGUAGE: ts
CODE:
```
const randomDefault = z.number().default(Math.random); randomDefault.parse(undefined); // => 0.4413456736055323
randomDefault.parse(undefined); // => 0.1871840107401901
randomDefault.parse(undefined); // => 0.7223408162401552
``` LANGUAGE: ts
CODE:
```
const randomDefault = z._default(z.number(), Math.random); z.parse(randomDefault, undefined); // => 0.4413456736055323
z.parse(randomDefault, undefined); // => 0.1871840107401901
z.parse(randomDefault, undefined); // => 0.7223408162401552
``` ---------------------------------------- TITLE: Dynamically Load Zod Locales for Internationalization
DESCRIPTION: Demonstrates how to lazily load a Zod locale using dynamic imports. This function takes a locale string and asynchronously imports and configures the corresponding locale, useful for optimizing bundle size.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/error-customization.mdx#_snippet_16 LANGUAGE: ts
CODE:
```
import { z } from "zod/v4"; async function loadLocale(locale: string) { const { default: locale } = await import(`zod/v4/locales/${locale}.js`); z.config(locale());
}; await loadLocale("fr");
``` ---------------------------------------- TITLE: Customize Error Message for Zod Custom Schema
DESCRIPTION: This snippet illustrates how to provide a custom error message to a `z.custom()` schema. The second argument allows for a string message or an object with `params` similar to `.refine`, enhancing the clarity of validation failures.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_86 LANGUAGE: ts
CODE:
```
z.custom<...>((val) => ..., "custom error message");
``` ---------------------------------------- TITLE: Configuring Internationalization for Zod Error Messages
DESCRIPTION: Zod 4 includes a new `locales` API designed for global translation of error messages. Currently, only the English locale is available, but more languages are expected to be added through community contributions.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_25 LANGUAGE: ts
CODE:
```
import { z } from "zod/v4"; // configure English locale (default)
z.config(z.locales.en());
``` ---------------------------------------- TITLE: Fixing Parsed Data Type Inference with z.infer
DESCRIPTION: Provides the solution to the parsed type inference issue by adding a type cast using `z.infer<T>` to the return value of `schema.parse()`, ensuring the correct inferred type is returned. Includes an example showing the corrected type inference.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/generic-functions.mdx#_snippet_3 LANGUAGE: TypeScript
CODE:
```
function parseData<T extends z.ZodTypeAny>(data: unknown, schema: T) { return schema.parse(data) as z.infer<T>; // ^^^^^^^^^^^^^^ <- add this
}
``` LANGUAGE: TypeScript
CODE:
```
parseData("sup", z.string());
// => string
``` ---------------------------------------- TITLE: Coerce Values to String with Zod
DESCRIPTION: This example demonstrates `z.coerce.string()`, which automatically converts input values to strings using JavaScript's `String()` constructor during parsing. It shows how various types are coerced and that the result is a standard `ZodString` instance.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_5 LANGUAGE: ts
CODE:
```
const schema = z.coerce.string();
schema.parse("tuna"); // => "tuna"
schema.parse(12); // => "12"
``` LANGUAGE: ts
CODE:
```
schema.parse(12); // => "12"
schema.parse(true); // => "true"
schema.parse(undefined); // => "undefined"
schema.parse(null); // => "null"
``` LANGUAGE: ts
CODE:
```
z.coerce.string().email().min(5);
``` ---------------------------------------- TITLE: Compare Zod Mini Refinement with Zod Method Chaining
DESCRIPTION: Illustrates how to apply refinements using the general-purpose `.check()` method in `zod/v4-mini` compared to method chaining in `zod/v4`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_14 LANGUAGE: ts
CODE:
```
import { z } from "zod/v4-mini"; z.array(z.number()).check( z.minLength(5), z.maxLength(10), z.refine(arr => arr.includes(5))
);
``` LANGUAGE: ts
CODE:
```
import { z } from "zod/v4"; z.array(z.number()) .min(5) .max(10) .refine(arr => arr.includes(5));
``` ---------------------------------------- TITLE: Zod `date()` Validation: ISO Date Format (YYYY-MM-DD)
DESCRIPTION: Shows the usage of `z.string().date()` to validate strings strictly in the `YYYY-MM-DD` ISO date format. This method ensures that the date string adheres to the specified format and rejects invalid formats or out-of-range values.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_16 LANGUAGE: ts
CODE:
```
const date = z.string().date(); date.parse("2020-01-01"); // pass
date.parse("2020-1-1"); // fail
date.parse("2020-01-32"); // fail
``` ---------------------------------------- TITLE: Chain Zod Extend and Omit Operations (Zod v4)
DESCRIPTION: Illustrates a complex chain of `extend()` and `omit()` operations on a Zod schema using `zod/v4`. This pattern previously caused compiler issues and slow compilation times in Zod 3 but is significantly optimized in Zod 4, demonstrating improved resilience against 'instantiation explosions'.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_9 LANGUAGE: ts
CODE:
```
import { z } from "zod/v4"; export const a = z.object({ a: z.string(), b: z.string(), c: z.string()
}); export const b = a.omit({ a: true, b: true, c: true
}); export const c = b.extend({ a: z.string(), b: z.string(), c: z.string()
}); export const d = c.omit({ a: true, b: true, c: true
}); export const e = d.extend({ a: z.string(), b: z.string(), c: z.string()
}); export const f = e.omit({ a: true, b: true, c: true
}); export const g = f.extend({ a: z.string(), b: z.string(), c: z.string()
}); export const h = g.omit({ a: true, b: true, c: true
}); export const i = h.extend({ a: z.string(), b: z.string(), c: z.string()
}); export const j = i.omit({ a: true, b: true, c: true
}); export const k = j.extend({ a: z.string(), b: z.string(), c: z.string()
}); export const l = k.omit({ a: true, b: true, c: true
}); export const m = l.extend({ a: z.string(), b: z.string(), c: z.string()
}); export const n = m.omit({ a: true, b: true, c: true
}); export const o = n.extend({ a: z.string(), b: z.string(), c: z.string()
}); export const p = o.omit({ a: true, b: true, c: true
}); export const q = p.extend({ a: z.string(), b: z.string(), c: z.string()
});
``` ---------------------------------------- TITLE: Use Zod Record Schema for Data Validation
DESCRIPTION: Provides a practical example of how to use an inferred `UserStore` type (derived from a Zod record schema) to ensure type safety and validate data assignments at runtime. It shows both successful and failing assignments.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_67 LANGUAGE: TypeScript
CODE:
```
const userStore: UserStore = {}; userStore["77d2586b-9e8e-4ecf-8b21-ea7e0530eadd"] = { name: "Carlotta",
}; // passes userStore["77d2586b-9e8e-4ecf-8b21-ea7e0530eadd"] = { whatever: "Ice cream sundae",
}; // TypeError
``` ---------------------------------------- TITLE: Zod Date Schema Basic Validation
DESCRIPTION: Demonstrates how to use z.date() to validate Date instances. It shows successful parsing for a Date object and failure for a string that is not coerced.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_26 LANGUAGE: ts
CODE:
```
z.date().safeParse(new Date()); // success: true
z.date().safeParse("2022-01-12T00:00:00.000Z"); // success: false
``` ---------------------------------------- TITLE: Resolve Zod Recursive Type Circularity Error with Annotation
DESCRIPTION: Provides the solution to the TypeScript circularity error (TS7023) by adding an explicit type annotation to the getter. This annotation helps TypeScript correctly infer the type, resolving the error and ensuring type safety for recursive Zod schemas.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_80 LANGUAGE: TypeScript
CODE:
```
const Activity = z.object({ name: z.string(), get subactivities(): z.ZodNullable<z.ZodArray<typeof Activity>> { return z.nullable(z.array(Activity)); }
});
``` ---------------------------------------- TITLE: Zod Transform: Using the Convenience Method
DESCRIPTION: Demonstrates the `.transform()` convenience method available directly on schemas in Zod. This simplifies the common pattern of piping a schema into a transform, showing its usage for calculating string length. Note that Zod Mini does not have an equivalent convenience method.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_117 LANGUAGE: ts
CODE:
```
const stringToLength = z.string().transform(val => val.length); ``` LANGUAGE: ts
CODE:
```
// no equivalent
``` ---------------------------------------- TITLE: Pick Specific Keys from Zod Object Schema
DESCRIPTION: Illustrates how to create a new Zod schema containing only specified keys from an existing object schema, similar to TypeScript's `Pick` utility type. Examples are provided for both standard Zod and Zod Mini.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_71 LANGUAGE: ts
CODE:
```
const JustTheTitle = Recipe.pick({ title: true });
``` LANGUAGE: ts
CODE:
```
const JustTheTitle = z.pick(Recipe, { title: true });
``` ---------------------------------------- TITLE: Understand Zod Boolean Coercion Behavior
DESCRIPTION: Illustrates the behavior of `z.coerce.boolean()` in Zod, showing how truthy and falsy values are coerced to `true` or `false` respectively, and highlighting common misconceptions about string inputs.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_3 LANGUAGE: ts
CODE:
```
const schema = z.coerce.boolean(); // Boolean(input) schema.parse("tuna"); // => true
schema.parse("true"); // => true
schema.parse("false"); // => true
schema.parse(1); // => true
schema.parse([]); // => true schema.parse(0); // => false
schema.parse(""); // => false
schema.parse(undefined); // => false
schema.parse(null); // => false
``` ---------------------------------------- TITLE: Configure Case Sensitivity for Zod z.stringbool()
DESCRIPTION: Explains how to make `z.stringbool()` case-sensitive by setting the `case` option to `"sensitive"`. By default, the schema is case-insensitive, converting inputs to lowercase before comparison.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_52 LANGUAGE: ts
CODE:
```
z.stringbool({ case: "sensitive"
});
``` ---------------------------------------- TITLE: Constraining Zod Schema Inputs in Generic Functions
DESCRIPTION: Explains how to use the generic parameters of `ZodType` (specifically `Output` in this example) to limit the types of schemas that can be passed to a generic function, providing type safety for function arguments. Includes examples showing a valid call and a call that results in a TypeScript error due to the constraint.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/generic-functions.mdx#_snippet_5 LANGUAGE: TypeScript
CODE:
```
function makeSchemaOptional<T extends z.ZodType<string>>(schema: T) { return schema.optional();
}
``` LANGUAGE: TypeScript
CODE:
```
makeSchemaOptional(z.string());
// works fine
``` LANGUAGE: TypeScript
CODE:
```
makeSchemaOptional(z.number());
// Error: 'ZodNumber' is not assignable to parameter of type 'ZodType<string, ZodTypeDef, string>'
``` ---------------------------------------- TITLE: Zod `datetime()` Validation: Default ISO 8601 (UTC only)
DESCRIPTION: Demonstrates the default behavior of `z.string().datetime()`, which enforces ISO 8601 format. By default, it allows arbitrary sub-second decimal precision and only accepts UTC ('Z') timezone, rejecting any timezone offsets.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_12 LANGUAGE: ts
CODE:
```
const datetime = z.string().datetime(); datetime.parse("2020-01-01T00:00:00Z"); // pass
datetime.parse("2020-01-01T00:00:00.123Z"); // pass
datetime.parse("2020-01-01T00:00:00.123456Z"); // pass (arbitrary precision)
datetime.parse("2020-01-01T00:00Z"); // pass (hours and minutes only)
datetime.parse("2020-01-01T00:00:00+02:00"); // fail (no offsets allowed)
``` ---------------------------------------- TITLE: Conditionally override Zod error messages or defer to default
DESCRIPTION: This snippet demonstrates how an error map can conditionally return a custom message for specific error codes (e.g., 'too_big') and return `undefined` to allow Zod's default error map or the next error map in the precedence chain to handle other issues.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/error-customization.mdx#_snippet_9 LANGUAGE: ts
CODE:
```
z.int64({ error: (issue) => { // override too_big error message if (issue.code === "too_big") { return { message: `Value must be <${issue.maximum}` }; } // defer to default return undefined; }
});
``` ---------------------------------------- TITLE: Define a Zod Record Schema with String Keys and Values
DESCRIPTION: This snippet demonstrates how to define a Zod record schema where both keys and values are strings. It shows schema definition, type inference, and parsing an object that conforms to the schema.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_93 LANGUAGE: ts
CODE:
```
const IdCache = z.record(z.string(), z.string());
type IdCache = z.infer<typeof IdCache>; // Record<string, string> IdCache.parse({ carlotta: "77d2586b-9e8e-4ecf-8b21-ea7e0530eadd", jimmie: "77d2586b-9e8e-4ecf-8b21-ea7e0530eadd",
});
``` ---------------------------------------- TITLE: Load English Locale for Zod Error Internationalization
DESCRIPTION: Illustrates how to import and configure the English locale (`en.js`) from `zod/v4` or `zod/v4-mini` to enable internationalized error messages. Zod Mini requires explicit loading as it doesn't auto-load locales.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/error-customization.mdx#_snippet_15 LANGUAGE: ts
CODE:
```
import { z } from "zod/v4";
import en from "zod/v4/locales/en.js" z.config(en());
``` LANGUAGE: ts
CODE:
```
import { z } from "zod/v4-mini"
import en from "zod/v4/locales/en.js" z.config(en());
``` ---------------------------------------- TITLE: Migrate Zod 'errorMap' to 'error' Function for Custom Errors
DESCRIPTION: This snippet shows the transition from Zod 3's 'errorMap' to Zod 4's unified 'error' function for advanced error customization. The 'error' function allows inspecting the 'issue' object (e.g., 'issue.code') to return specific error messages, simplifying complex error logic.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_36 LANGUAGE: TypeScript
CODE:
```
z.string({ error: (issue) => { if (issue.code === "too_small") { return `Value must be >${issue.minimum}` } }
});
``` ---------------------------------------- TITLE: Merge Zod Object Schemas with .merge
DESCRIPTION: Explains how to combine two Zod object schemas into one using the `.merge()` method, noting that properties from the second schema override those from the first if keys conflict.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_45 LANGUAGE: typescript
CODE:
```
const BaseTeacher = z.object({ students: z.array(z.string()) });
const HasID = z.object({ id: z.string() }); const Teacher = BaseTeacher.merge(HasID);
type Teacher = z.infer<typeof Teacher>; // => { students: string[], id: string }
``` ---------------------------------------- TITLE: Define Zod Schema with Multiple Checks
DESCRIPTION: Demonstrates how to apply multiple validation checks like email and minimum length to a Zod string schema, and how to access the internal check definitions.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/core.mdx#_snippet_7 LANGUAGE: ts
CODE:
```
const schema = z.string().check(z.email()).check(z.min(5));
// => $ZodString schema._zod.def.checks;
// => [$ZodCheckEmail, $ZodCheckMinLength]
``` ---------------------------------------- TITLE: Validating Promises with Zod
DESCRIPTION: Demonstrates how to use `z.promise` to validate asynchronous values. It explains that Zod first synchronously checks if the input is a Promise, then attaches an additional validation step to the Promise's resolution, requiring `.catch` for error handling.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_76 LANGUAGE: ts
CODE:
```
const numberPromise = z.promise(z.number());
``` LANGUAGE: ts
CODE:
```
numberPromise.parse("tuna");
// ZodError: Non-Promise type: string numberPromise.parse(Promise.resolve("tuna"));
// => Promise<number> const test = async () => { await numberPromise.parse(Promise.resolve("tuna")); // ZodError: Non-number type: string await numberPromise.parse(Promise.resolve(3.14)); // => 3.14
};
``` ---------------------------------------- TITLE: Define Unknown and Any Schemas in Zod
DESCRIPTION: Explains how Zod mirrors TypeScript's `any` and `unknown` types, providing `z.any()` and `z.unknown()` APIs to represent these special types in schema definitions.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_58 LANGUAGE: ts
CODE:
```
// allows any values
z.any(); // inferred type: `any`
z.unknown(); // inferred type: `unknown`
``` ---------------------------------------- TITLE: Define a Zod object schema
DESCRIPTION: This snippet defines a strict Zod object schema with a 'username' (string) and 'favoriteNumbers' (array of numbers). This schema will be used for subsequent validation examples.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/error-formatting.mdx#_snippet_0 LANGUAGE: ts
CODE:
```
import { z } from "zod/v4"; const schema = z.strictObject({ username: z.string(), favoriteNumbers: z.array(z.number()),
});
``` ---------------------------------------- TITLE: Zod Date Schema Min/Max Validations
DESCRIPTION: Illustrates how to apply min and max constraints to a Zod date schema, allowing for validation against specific date ranges with custom messages.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_28 LANGUAGE: ts
CODE:
```
z.date().min(new Date("1900-01-01"), { message: "Too old" });
z.date().max(new Date(), { message: "Too young!" });
``` ---------------------------------------- TITLE: Customize Zod Boolean Schema Error Messages
DESCRIPTION: When defining a boolean schema in Zod, you can customize the error messages for common validation failures. The `required_error` option sets the message for missing values, while `invalid_type_error` handles cases where the input is not a boolean.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_25 LANGUAGE: ts
CODE:
```
const isActive = z.boolean({ required_error: "isActive is required", invalid_type_error: "isActive must be a boolean",
});
``` ---------------------------------------- TITLE: Customize Zod String Error Message with 'error' Parameter
DESCRIPTION: This snippet demonstrates the Zod 4 change from using 'message' to 'error' for customizing simple validation error messages on string schemas. The 'message' parameter is now deprecated.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_34 LANGUAGE: TypeScript
CODE:
```
z.string().min(5, { error: "Too short." });
``` ---------------------------------------- TITLE: Zod Date Validation with Custom Error Message
DESCRIPTION: Shows how to customize the error message for `z.date()` validation based on the input.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_41 LANGUAGE: ts
CODE:
```
z.date({ error: issue => issue.input === undefined ? "Required" : "Invalid date"
});
``` ---------------------------------------- TITLE: Zod Date Schema with Custom Error Messages
DESCRIPTION: Shows how to customize error messages for required_error and invalid_type_error when defining a Zod date schema.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_27 LANGUAGE: ts
CODE:
```
const myDateSchema = z.date({ required_error: "Please select a date and time", invalid_type_error: "That's not a date!"
});
``` ---------------------------------------- TITLE: Basic Zod Date Validation
DESCRIPTION: Explains how to validate `Date` instances using `z.date()`, noting that it only accepts actual `Date` objects, not date strings.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_40 LANGUAGE: ts
CODE:
```
z.date().safeParse(new Date()); // success: true
z.date().safeParse("2022-01-12T06:15:00.000Z"); // success: false
``` ---------------------------------------- TITLE: Zod Boolean Validation
DESCRIPTION: Demonstrates how to validate boolean values (`true` or `false`) using `z.boolean()`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_39 LANGUAGE: ts
CODE:
```
z.boolean().parse(true); // => true
z.boolean().parse(false); // => false
``` ---------------------------------------- TITLE: Zod Integer Validation
DESCRIPTION: Shows how to validate integers using `z.int()` for safe integer range and `z.int32()` for 32-bit integer range.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_36 LANGUAGE: ts
CODE:
```
z.int(); // restricts to safe integer range
z.int32(); // restrict to int32 range
``` ---------------------------------------- TITLE: Zod 4: Refactored `z.function()` API
DESCRIPTION: Compares the new `z.function()` API in Zod 4 with the old Zod 3 API. In Zod 4, `z.function()` is a standalone factory where `input` and `output` schemas are defined upfront, replacing `args()` and `returns()` methods.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/changelog.mdx#_snippet_28 LANGUAGE: typescript
CODE:
```
const myFunction = z.function({ input: [z.object({ name: z.string(), age: z.number().int(), })], output: z.string(),
}); myFunction.implement((input) => { return `Hello ${input.name}, you are ${input.age} years old.`;
});
``` LANGUAGE: typescript
CODE:
```
const myFunction = z.function() .args(z.object({ name: z.string(), age: z.number().int(), })) .returns(z.string()); myFunction.implement((input) => { return `Hello ${input.name}, you are ${input.age} years old.`;
});
``` ---------------------------------------- TITLE: Zod 4: Improved Enum Support in `z.record()`
DESCRIPTION: Zod 4 significantly enhances `z.record()`'s handling of enum key schemas. Unlike Zod 3, where using an enum resulted in a partial type, Zod 4 now infers the expected exhaustive type and enforces that all enum keys exist in the input during parsing, ensuring type safety and completeness.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/changelog.mdx#_snippet_40 LANGUAGE: ts
CODE:
```
const myRecord = z.record(z.enum(["a", "b", "c"]), z.number()); // { a?: number; b?: number; c?: number; }
``` LANGUAGE: ts
CODE:
```
const myRecord = z.record(z.enum(["a", "b", "c"]), z.number());
// { a: number; b: number; c: number; }
``` ---------------------------------------- TITLE: Access advanced issue properties in Zod error map
DESCRIPTION: This snippet illustrates how to access various advanced properties of the `iss` context object within an error map, such as `code`, `input`, `inst`, and `path`, for highly customized error messages.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/error-customization.mdx#_snippet_7 LANGUAGE: ts
CODE:
```
z.string({ error: (iss) => { iss.code; // the issue code iss.input; // the input data iss.inst; // the schema/check that originated this issue iss.path; // the path of the error }
});
``` ---------------------------------------- TITLE: Zod Native Enum Schema for Const Asserted Objects
DESCRIPTION: Explains how z.nativeEnum() can validate an as const object, inferring its literal types and demonstrating successful parsing for its values.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_37 LANGUAGE: ts
CODE:
```
const Fruits = { Apple: "apple", Banana: "banana", Cantaloupe: 3,
} as const; const FruitEnum = z.nativeEnum(Fruits);
type FruitEnum = z.infer<typeof FruitEnum>; // "apple" | "banana" | 3 FruitEnum.parse("apple"); // passes
FruitEnum.parse("banana"); // passes
FruitEnum.parse(3); // passes
FruitEnum.parse("Cantaloupe"); // fails
``` ---------------------------------------- TITLE: Zod Native Enum Schema for Numeric Enums
DESCRIPTION: Demonstrates how to validate a TypeScript numeric enum using z.nativeEnum(), showing successful parsing for both enum members and their numeric values, and failure for invalid numbers.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_35 LANGUAGE: ts
CODE:
```
enum Fruits { Apple, Banana,
} const FruitEnum = z.nativeEnum(Fruits);
type FruitEnum = z.infer<typeof FruitEnum>; // Fruits FruitEnum.parse(Fruits.Apple); // passes
FruitEnum.parse(Fruits.Banana); // passes
FruitEnum.parse(0); // passes
FruitEnum.parse(1); // passes
FruitEnum.parse(3); // fails
``` ---------------------------------------- TITLE: Understand Zod error map precedence with schema-level and per-parse
DESCRIPTION: This snippet illustrates the precedence rules for Zod error maps, demonstrating that schema-level custom messages take higher priority and override per-parse error maps.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/error-customization.mdx#_snippet_11 LANGUAGE: ts
CODE:
```
const schema = z.string({ error: "highest priority" });
const result = schema.safeParse(12, { error: (iss) => "lower priority"
}); result.error.issues;
// [{ message: "highest priority", ... }]
``` ---------------------------------------- TITLE: Define Fixed-Length Tuple Schema in Zod
DESCRIPTION: Explains how to define a tuple schema in Zod, which allows specifying different types for each element at a fixed position. It also demonstrates how to infer the corresponding TypeScript type from the Zod tuple schema.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_84 LANGUAGE: ts
CODE:
```
const MyTuple = z.tuple([ z.string(), z.number(), z.boolean()
]); type MyTuple = z.infer<typeof MyTuple>;
// [string, number, boolean]
``` ---------------------------------------- TITLE: Zod Date Schema Coercion from Various Inputs
DESCRIPTION: Explains how to use z.coerce.date() to convert various input types (strings, Date objects) into Date instances, demonstrating both valid and invalid coercion attempts.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_29 LANGUAGE: ts
CODE:
```
const dateSchema = z.coerce.date();
type DateSchema = z.infer<typeof dateSchema>;
// type DateSchema = Date /* valid dates */
console.log(dateSchema.safeParse("2023-01-10T00:00:00.000Z").success); // true
console.log(dateSchema.safeParse("2023-01-10").success); // true
console.log(dateSchema.safeParse("1/10/23").success); // true
console.log(dateSchema.safeParse(new Date("1/10/23")).success); // true /* invalid dates */
console.log(dateSchema.safeParse("2023-13-10").success); // false
console.log(dateSchema.safeParse("0000-00-00").success); // false
``` ---------------------------------------- TITLE: Validate ISO 8601 datetimes allowing timezone offsets with Zod
DESCRIPTION: Shows how to configure `z.iso.datetime()` with `{ offset: true }` to permit timezone offsets in ISO 8601 strings. It clarifies which offset formats are supported (e.g., `+HH:MM`) and that `Z` (UTC) is still valid.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_22 LANGUAGE: ts
CODE:
```
const datetime = z.iso.datetime({ offset: true }); // allows timezone offsets
datetime.parse("2020-01-01T06:15:00+02:00"); // ✅ // basic offsets not allowed
datetime.parse("2020-01-01T06:15:00+02"); // ❌
datetime.parse("2020-01-01T06:15:00+0200"); // ❌ // Z is still supported
datetime.parse("2020-01-01T06:15:00Z"); // ✅
``` ---------------------------------------- TITLE: Create a Custom Zod Schema with Validation Logic
DESCRIPTION: This example demonstrates how to create a custom Zod schema for any TypeScript type using `z.custom()`. It includes a validation function to ensure the input matches a specific format, such as a CSS pixel value, providing robust type checking for unsupported types.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_84 LANGUAGE: ts
CODE:
```
const px = z.custom<`${number}px`>((val) => { return typeof val === "string" ? /^\d+px$/.test(val) : false;
}); type px = z.infer<typeof px>; // `${number}px` px.parse("42px"); // "42px"
px.parse("42vw"); // throws;
``` ---------------------------------------- TITLE: Directly Pushing to Zod Error Issues Array
DESCRIPTION: The .addIssue() and .addIssues() methods are deprecated. Instead, directly push new issue objects to the err.issues array for custom error handling.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/changelog.mdx#_snippet_14 LANGUAGE: TypeScript
CODE:
```
myError.issues.push({ // new issue
});
``` ---------------------------------------- TITLE: Validate local ISO 8601 datetimes without timezone with Zod
DESCRIPTION: Explains how to use `z.iso.datetime({ local: true })` to allow unqualified (timezone-less) ISO 8601 datetime strings. It also notes that seconds are optional in this format.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_23 LANGUAGE: ts
CODE:
```
const schema = z.iso.datetime({ local: true });
schema.parse("2020-01-01T06:15:01"); // ✅
schema.parse("2020-01-01T06:15"); // ✅ seconds optional
``` ---------------------------------------- TITLE: Zod 4: Removal of Static `.create()` Factories
DESCRIPTION: Notes the removal of static `.create()` methods from Zod classes in Zod 4. These are now replaced by standalone factory functions.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/changelog.mdx#_snippet_33 LANGUAGE: typescript
CODE:
```
z.ZodString.create(); // ❌
``` ---------------------------------------- TITLE: Zod 4: Removal of `.deepPartial()` Method
DESCRIPTION: The `.deepPartial()` method, deprecated since Zod 3, is now removed in Zod 4. There is no direct alternative, as its implementation had footguns and was considered an anti-pattern.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/changelog.mdx#_snippet_35 LANGUAGE: APIDOC
CODE:
```
Method: .deepPartial()
Status: Removed in Zod 4
Alternative: None (considered an anti-pattern)
``` ---------------------------------------- TITLE: Convert Zod Object Schemas with 'io: input' Option
DESCRIPTION: Shows how converting a Zod object schema to JSON Schema using the `io: "input"` option prevents `additionalProperties` from being set, which is useful for defining input schemas that allow extra fields.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/json-schema.mdx#_snippet_7 LANGUAGE: TypeScript
CODE:
```
import { z } from "zod/v4"; const schema = z.object({ name: z.string(), age: z.number(),
}); z.toJSONSchema(schema, { io: "input" });
// => {
// type: 'object',
// properties: { name: { type: 'string' }, age: { type: 'number' } },
// required: [ 'name', 'age' ],
// }
``` ---------------------------------------- TITLE: Define Multiple Values in Zod 'z.literal()'
DESCRIPTION: This snippet demonstrates the new capability in Zod 4 for 'z.literal()' to accept an array of values, simplifying the definition of schemas that match any of a predefined set of literals. This replaces the need for 'z.union' combined with multiple 'z.literal' calls from Zod 3.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_39 LANGUAGE: TypeScript
CODE:
```
const httpCodes = z.literal([ 200, 201, 202, 204, 206, 207, 208, 226 ]);
``` ---------------------------------------- TITLE: Create a Custom Zod Schema with a Validation Function
DESCRIPTION: Shows how to define a custom Zod schema for a specific TypeScript type (e.g., template string literals like `${number}px`) by providing a validation function to `z.custom()`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_134 LANGUAGE: ts
CODE:
```
const px = z.custom<`${number}px`>((val) => { return typeof val === "string" ? /^\d+px$/.test(val) : false;
}); type px = z.infer<typeof px>; // `${number}px` px.parse("42px"); // "42px"
px.parse("42vw"); // throws;
``` ---------------------------------------- TITLE: Validating Class Instances with Zod
DESCRIPTION: Shows how to use `z.instanceof` to check if an input is an instance of a specific JavaScript class. This is particularly useful for validating objects against classes imported from third-party libraries.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_77 LANGUAGE: ts
CODE:
```
class Test { name: string;
} const TestSchema = z.instanceof(Test); const blob: any = "whatever";
TestSchema.parse(new Test()); // passes
TestSchema.parse(blob); // throws
``` ---------------------------------------- TITLE: ZodError.flatten() Method Deprecation
DESCRIPTION: This API documentation entry highlights the deprecation of the `.flatten()` method on `ZodError` in Zod v4. The recommended alternative for flattening errors is the top-level `z.treeifyError()` function.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/changelog.mdx#_snippet_12 LANGUAGE: APIDOC
CODE:
```
ZodError.flatten()
``` ---------------------------------------- TITLE: Apply Readonly to Zod Schemas and Inferred Types
DESCRIPTION: The `.readonly()` method returns a `ZodReadonly` schema instance that parses input and then calls `Object.freeze()` on the result. The inferred type is also marked as `readonly`, leveraging TypeScript's built-in readonly types for objects, arrays, tuples, maps, and sets.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_111 LANGUAGE: ts
CODE:
```
const schema = z.object({ name: z.string() }).readonly();
type schema = z.infer<typeof schema>;
// Readonly<{name: string}> const result = schema.parse({ name: "fido" });
result.name = "simba"; // error
``` LANGUAGE: ts
CODE:
```
z.array(z.string()).readonly();
// readonly string[] z.tuple([z.string(), z.number()]).readonly();
// readonly [string, number] z.map(z.string(), z.date()).readonly();
// ReadonlyMap<string, Date> z.set(z.string()).readonly();
// ReadonlySet<string>
``` ---------------------------------------- TITLE: Import Zod v4 Module
DESCRIPTION: Demonstrates how to import Zod 4 using its dedicated subpath, `zod/v4`, for explicit version usage.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/changelog.mdx#_snippet_1 LANGUAGE: ts
CODE:
```
import { z } from "zod/v4";
``` ---------------------------------------- TITLE: Zod Date-Specific Validations
DESCRIPTION: Provides examples of date-specific validations in Zod, including minimum and maximum date checks. Shows both standard Zod and Zod Mini syntax.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_42 LANGUAGE: ts (Zod)
CODE:
```
z.date().min(new Date("1900-01-01"), { error: "Too old!" });
z.date().max(new Date(), { error: "Too young!" });
``` LANGUAGE: ts (Zod Mini)
CODE:
```
z.date().check(z.minimum(new Date("1900-01-01"), { error: "Too old!" }));
z.date().check(z.maximum(new Date(), { error: "Too young!" }));
``` ---------------------------------------- TITLE: Mark refinements as non-continuable with `abort` in Zod
DESCRIPTION: Explains how to use the `abort: true` option to stop validation immediately upon a refinement failure, preventing subsequent checks from running.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_106 LANGUAGE: ts
CODE:
```
const myString = z.string() .refine((val) => val.length > 8, { error: "Too short!", abort: true }) .refine((val) => val === val.toLowerCase(), { error: "Must be lowercase", abort: true }); const result = myString.safeParse("OH NO");
result.error!.issues;
// => [{ "code": "custom", "message": "Too short!" }]
``` LANGUAGE: ts
CODE:
```
const myString = z.string().check( z.refine((val) => val.length > 8, { error: "Too short!", abort: true }), z.refine((val) => val === val.toLowerCase(), { error: "Must be lowercase", abort: true })
); const result = z.safeParse(myString, "OH NO");
result.error!.issues;
// [ { "code": "custom", "message": "Too short!" }]
``` ---------------------------------------- TITLE: Convert Zod Global Registry to JSON Schema with Absolute URIs
DESCRIPTION: This example demonstrates how to generate JSON Schema from the `z.globalRegistry` with absolute `$ref` URIs. By providing a `uri` function to `z.toJSONSchema()`, registered schema IDs are transformed into fully-qualified URLs, suitable for external referencing or serving from a web server.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/json-schema.mdx#_snippet_29 LANGUAGE: typescript
CODE:
```
z.toJSONSchema(z.globalRegistry, { uri: (id) => `https://example.com/${id}.json`
});
// => {
// schemas: {
// User: {
// id: 'User',
// type: 'object',
// properties: {
// name: { type: 'string' },
// posts: {
// type: 'array',
// items: { '$ref': 'https://example.com/Post.json' }
// }
// },
// required: [ 'name', 'posts' ],
// additionalProperties: false,
// },
// Post: {
// id: 'Post',
// type: 'object',
// properties: {
// title: { type: 'string' },
// content: { type: 'string' },
// author: { '$ref': 'https://example.com/User.json' }
// },
// required: [ 'title', 'content', 'author' ],
// additionalProperties: false,
// }
// }
// }
``` ---------------------------------------- TITLE: Zod: Abort Early Refinement with `fatal` Flag
DESCRIPTION: Demonstrates how to stop further refinement checks by setting the `fatal` flag to `true` in `ctx.addIssue` and returning `z.NEVER`. This prevents subsequent refinements from executing after a critical validation failure.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_93 LANGUAGE: typescript
CODE:
```
const schema = z.number().superRefine((val, ctx) => { if (val < 10) { ctx.addIssue({ code: z.ZodIssueCode.custom, message: "should be >= 10", fatal: true, }); return z.NEVER; } if (val !== 12) { ctx.addIssue({ code: z.ZodIssueCode.custom, message: "should be twelve", }); }
});
``` ---------------------------------------- TITLE: Zod Enum Schema Subsetting with Exclude and Extract
DESCRIPTION: Explains how to create subsets of a Zod enum using the .extract method to include specific values and the .exclude method to remove specific values.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_34 LANGUAGE: ts
CODE:
```
const FishEnum = z.enum(["Salmon", "Tuna", "Trout"]);
const SalmonAndTrout = FishEnum.extract(["Salmon", "Trout"]);
const TunaOnly = FishEnum.exclude(["Salmon", "Trout"]);
``` ---------------------------------------- TITLE: Create New Zod Enum Schema by Extracting Values
DESCRIPTION: Illustrates the use of the `.extract()` method to create a new Zod enum schema containing only a specified subset of values from the original enum. This method is available in Zod but not Zod Mini.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_49 LANGUAGE: ts
CODE:
```
const FishEnum = z.enum(["Salmon", "Tuna", "Trout"]);
const SalmonAndTroutOnly = FishEnum.extract(["Salmon", "Trout"]);
``` LANGUAGE: ts
CODE:
```
// no equivalent ``` ---------------------------------------- TITLE: Zod 4: `ZodEffects` Class Dropped and Refinements Reworked
DESCRIPTION: Zod 4 removes the `ZodEffects` wrapper class, which previously handled both refinements and transformations. Refinements are now integrated directly into schemas as an array of 'checks,' a new concept generalizing validations. This change streamlines how Zod processes validations and is particularly evident in `zod/v4-mini`'s reliance on the `.check()` method for composing validations.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/changelog.mdx#_snippet_43 LANGUAGE: ts
CODE:
```
import { z } from "zod/v4-mini"; z.string().check( z.minLength(10), z.maxLength(100), z.toLowerCase(), z.trim(),
);
``` ---------------------------------------- TITLE: Understand Zod Boolean Coercion Behavior
DESCRIPTION: This example highlights the behavior of `z.coerce.boolean()`, which converts any truthy value to `true` and any falsy value to `false` based on JavaScript's `Boolean()` constructor. It demonstrates various inputs and their coerced boolean outputs.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_7 LANGUAGE: ts
CODE:
```
const schema = z.coerce.boolean(); // Boolean(input) schema.parse("tuna"); // => true
schema.parse("true"); // => true
schema.parse("false"); // => true
schema.parse(1); // => true
schema.parse([]); // => true schema.parse(0); // => false
schema.parse(""); // => false
schema.parse(undefined); // => false
schema.parse(null); // => false
``` ---------------------------------------- TITLE: Replacing Zod .strict() and .passthrough() with Top-Level Functions
DESCRIPTION: The .strict() and .passthrough() methods on z.object() are deprecated. Use the new top-level z.strictObject() and z.looseObject() functions for clearer intent and improved tree-shaking. These legacy methods remain for backward compatibility.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/changelog.mdx#_snippet_21 LANGUAGE: TypeScript
CODE:
```
// Zod 3
z.object({ name: z.string() }).strict();
z.object({ name: z.string() }).passthrough(); // Zod 4
z.strictObject({ name: z.string() });
z.looseObject({ name: z.string() });
``` ---------------------------------------- TITLE: Define Mutually Recursive Zod Objects
DESCRIPTION: Illustrates how to define two Zod schemas that mutually reference each other. This example shows a 'User' schema referencing 'Post' and a 'Post' schema referencing 'User', demonstrating a common pattern for interconnected data structures.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_78 LANGUAGE: TypeScript
CODE:
```
const User = z.object({ email: z.email(), get posts(){ return z.array(Post) }
}); const Post = z.object({ title: z.string(), get author(){ return User }
});
``` ---------------------------------------- TITLE: Validate Specific UUID Versions with Zod
DESCRIPTION: Explains how to validate specific UUID versions (v1-v8) using the `version` parameter in `z.uuid()`, and highlights convenience methods like `z.uuidv4()`, `z.uuidv6()`, and `z.uuidv7()`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_15 LANGUAGE: ts
CODE:
```
// supports "v1", "v2", "v3", "v4", "v5", "v6", "v7", "v8"
z.uuid({ version: "v4" }); // for convenience
z.uuidv4();
z.uuidv6();
z.uuidv7();
``` ---------------------------------------- TITLE: Define Nested Discriminated Unions with Zod
DESCRIPTION: Shows an advanced example of nesting discriminated unions in Zod. It defines a `BaseError` and `MyErrors` discriminated union, which is then included as one of the options in the `MyResult` discriminated union, demonstrating Zod's ability to optimize parsing across multiple levels of discrimination.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_90 LANGUAGE: ts
CODE:
```
const BaseError = { status: z.literal("failed"), message: z.string() };
const MyErrors = z.discriminatedUnion("code", [ z.object({ ...BaseError, code: z.literal(400) }), z.object({ ...BaseError, code: z.literal(401) }), z.object({ ...BaseError, code: z.literal(500) }),
]); const MyResult = z.discriminatedUnion("status", [ z.object({ status: z.literal("success"), data: z.string() }), MyErrors
]);
``` ---------------------------------------- TITLE: Validate UUIDs with Zod
DESCRIPTION: Demonstrates the basic usage of `z.uuid()` for validating universally unique identifiers (UUIDs) according to the standard specification.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_14 LANGUAGE: ts
CODE:
```
z.uuid();
``` ---------------------------------------- TITLE: Handle Unrepresentable Types as Any
DESCRIPTION: Shows how to configure `z.toJSONSchema` to convert unrepresentable Zod types into an empty object (`{}`), equivalent to `unknown` in JSON Schema, by setting `unrepresentable: "any"`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/json-schema.mdx#_snippet_19 LANGUAGE: ts
CODE:
```
z.toJSONSchema(z.bigint(), { unrepresentable: "any" });
// => {}
``` ---------------------------------------- TITLE: Validate Zod String IP Addresses
DESCRIPTION: Zod's `.ip()` method validates strings as IP addresses, supporting both IPv4 and IPv6 by default. The `version` option can be specified to enforce validation for a particular IP version (e.g., "v4" or "v6").
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_18 LANGUAGE: ts
CODE:
```
const ip = z.string().ip(); ip.parse("192.168.1.1"); // pass
ip.parse("84d5:51a0:9114:1855:4cfa:f2d7:1f12:7003"); // pass
ip.parse("84d5:51a0:9114:1855:4cfa:f2d7:1f12:192.168.1.1"); // pass ip.parse("256.1.1.1"); // fail
ip.parse("84d5:51a0:9114:gggg:4cfa:f2d7:1f12:7003"); // fail
``` LANGUAGE: ts
CODE:
```
const ipv4 = z.string().ip({ version: "v4" });
ipv4.parse("84d5:51a0:9114:1855:4cfa:f2d7:1f12:7003"); // fail const ipv6 = z.string().ip({ version: "v6" });
ipv6.parse("192.168.1.1"); // fail
``` ---------------------------------------- TITLE: Issue Inferring Parsed Data Type with ZodTypeAny
DESCRIPTION: Illustrates a common problem when using `z.ZodTypeAny` in a generic function that parses data, where the return type of `schema.parse()` is incorrectly inferred as `any`. Includes an example demonstrating this issue.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/generic-functions.mdx#_snippet_2 LANGUAGE: TypeScript
CODE:
```
function parseData<T extends z.ZodTypeAny>(data: unknown, schema: T) { return schema.parse(data);
}
``` LANGUAGE: TypeScript
CODE:
```
parseData("sup", z.string());
// => any
``` ---------------------------------------- TITLE: Correct Generic Function for Zod Schema Input with ZodTypeAny
DESCRIPTION: The recommended approach for writing generic functions that accept Zod schemas is to use `T extends z.ZodTypeAny`. This preserves the specific subclass information of the input schema, allowing TypeScript to properly infer types and enable access to schema-specific methods.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_116 LANGUAGE: ts
CODE:
```
function inferSchema<T extends z.ZodTypeAny>(schema: T) { return schema;
} inferSchema(z.string());
// => ZodString
``` ---------------------------------------- TITLE: Customize Zod Number Validation Error Messages
DESCRIPTION: Zod allows developers to provide custom error messages for individual number validation methods. By passing an object with a `message` property as the second argument to a validation method, you can override the default error string.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_22 LANGUAGE: ts
CODE:
```
z.number().lte(5, { message: "this👏is👏too👏big" });
``` ---------------------------------------- TITLE: Zod 4: `z.unknown()` and `z.any()` Optionality Change
DESCRIPTION: Demonstrates the change in inferred types for `z.any()` and `z.unknown()` schemas in Zod 4. Previously, these types were marked as optional; now, they are explicitly required.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/changelog.mdx#_snippet_23 LANGUAGE: typescript
CODE:
```
const mySchema = z.object({ a: z.any(), b: z.unknown()
});
// Zod 3: { a?: any; b?: unknown };
// Zod 4: { a: any; b: unknown };
``` ---------------------------------------- TITLE: Create a Custom Zod Schema Registry
DESCRIPTION: Demonstrates how to initialize a strongly-typed schema registry using `z.registry()` to associate schemas with custom metadata.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_17 LANGUAGE: ts
CODE:
```
import { z } from "zod/v4"; const myRegistry = z.registry<{ title: string; description: string }>();
``` ---------------------------------------- TITLE: Define Object Schema with Catchall Validation in Zod
DESCRIPTION: Shows how to use `.catchall()` to define a schema that validates any unrecognized keys in an object. This ensures that extra properties conform to a specified type, preventing unexpected data.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_65 LANGUAGE: ts
CODE:
```
const DogWithStrings = z.object({ name: z.string(), age: z.number().optional()
}).catchall(z.string()); DogWithStrings.parse({ name: "Yeller", extraKey: "extraValue" }); // ✅
DogWithStrings.parse({ name: "Yeller", extraKey: 42 }); // ❌
``` ---------------------------------------- TITLE: Defining Recursive Schemas in Zod
DESCRIPTION: Illustrates how to define recursive schemas in Zod using `z.lazy()` to handle TypeScript's limitation with static type inference for self-referential types. It requires manual type definition and providing it to Zod as a type hint.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_73 LANGUAGE: ts
CODE:
```
const baseCategorySchema = z.object({ name: z.string(),
}); type Category = z.infer<typeof baseCategorySchema> & { subcategories: Category[];
}; const categorySchema: z.ZodType<Category> = baseCategorySchema.extend({ subcategories: z.lazy(() => categorySchema.array()),
}); categorySchema.parse({ name: "People", subcategories: [ { name: "Politicians", subcategories: [ { name: "Presidents", subcategories: [], }, ], }, ],
}); // passes
``` ---------------------------------------- TITLE: Zod 4: Removal of `z.ostring()`, `z.onumber()` Convenience Methods
DESCRIPTION: Undocumented convenience methods like `z.ostring()`, `z.onumber()`, etc., which were shorthand for optional schemas, have been removed in Zod 4.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/changelog.mdx#_snippet_37 LANGUAGE: APIDOC
CODE:
```
Functions: z.ostring(), z.onumber(), etc.
Status: Removed in Zod 4
Purpose: Previously shorthand for optional schemas (e.g., z.string().optional())
``` ---------------------------------------- TITLE: Convert Zod String Formats to JSON Schema 'format'
DESCRIPTION: Shows how various Zod string validation methods are converted to JSON Schema using the `format` keyword, providing specific examples like email, date-time, and URL formats.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/json-schema.mdx#_snippet_2 LANGUAGE: TypeScript
CODE:
```
// Supported via `format`
z.email(); // => { type: "string", format: "email" }
z.iso.datetime(); // => { type: "string", format: "date-time" }
z.iso.date(); // => { type: "string", format: "date" }
z.iso.time(); // => { type: "string", format: "time" }
z.iso.duration(); // => { type: "string", format: "duration" }
z.ipv4(); // => { type: "string", format: "ipv4" }
z.ipv6(); // => { type: "string", format: "ipv6" }
z.uuid(); // => { type: "string", format: "uuid" }
z.guid(); // => { type: "string", format: "uuid" }
z.url(); // => { type: "string", format: "uri" }
``` ---------------------------------------- TITLE: Parse and Freeze Zod Readonly Schemas to Prevent Modification
DESCRIPTION: Shows that parsing a readonly Zod schema results in a frozen object using `Object.freeze()`, preventing subsequent modifications and throwing a TypeError if attempted.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_131 LANGUAGE: ts
CODE:
```
const result = ReadonlyUser.parse({ name: "fido" });
result.name = "simba"; // throws TypeError
``` LANGUAGE: ts
CODE:
```
const result = z.parse(ReadonlyUser, { name: "fido" });
result.name = "simba"; // throws TypeError
``` ---------------------------------------- TITLE: Zod `datetime()` Validation: Allowing Timezone Offsets
DESCRIPTION: Shows how to configure `z.string().datetime()` to allow timezone offsets by setting the `offset` option to `true`. This enables validation for datetime strings that include various offset formats, while still supporting the 'Z' (UTC) indicator.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_13 LANGUAGE: ts
CODE:
```
const datetime = z.string().datetime({ offset: true }); datetime.parse("2020-01-01T00:00:00+02:00"); // pass
datetime.parse("2020-01-01T00:00+02:00"); // pass
datetime.parse("2020-01-01T00:00:00.123+02:00"); // pass (millis optional)
datetime.parse("2020-01-01T00:00:00.123+0200"); // pass (millis optional)
datetime.parse("2020-01-01T00:00:00.123+02"); // pass (only offset hours)
datetime.parse("2020-01-01T00:00:00Z"); // pass (Z still supported)
``` ---------------------------------------- TITLE: Add Variadic (Rest) Arguments to Zod Tuples
DESCRIPTION: Demonstrates how to define a tuple schema with a variadic or 'rest' argument. This allows for an arbitrary number of elements of a specific type to appear at the end of the tuple, extending its fixed-length definition.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_85 LANGUAGE: ts
CODE:
```
const variadicTuple = z.tuple([z.string()], z.number());
// => [string, ...number[]];
``` ---------------------------------------- TITLE: Define Zod Issue Union Type
DESCRIPTION: Defines a comprehensive union type that encompasses all specific Zod issue subtypes. This type allows for a unified representation of various validation errors, from invalid types to unrecognized keys, facilitating robust error handling.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/core.mdx#_snippet_16 LANGUAGE: typescript
CODE:
```
export type $ZodIssue = | $ZodIssueInvalidType | $ZodIssueTooBig | $ZodIssueTooSmall | $ZodIssueInvalidStringFormat | $ZodIssueNotMultipleOf | $ZodIssueUnrecognizedKeys | $ZodIssueInvalidUnion | $ZodIssueInvalidKey | $ZodIssueInvalidElement | $ZodIssueInvalidValue | $ZodIssueCustom;
``` ---------------------------------------- TITLE: Define Self-Referential Recursive Zod Object
DESCRIPTION: Demonstrates how to define a self-referential Zod schema using a getter on the key. This approach allows JavaScript to resolve the cyclical schema at runtime, as shown with a 'Category' schema containing nested 'subcategories'.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_77 LANGUAGE: TypeScript
CODE:
```
const Category = z.object({ name: z.string(), get subcategories(){ return z.array(Category) }
}); type Category = z.infer<typeof Category>;
// { name: string; subcategories: Category[] }
``` ---------------------------------------- TITLE: Zod Schema Immutability and Metadata Association
DESCRIPTION: Explains that Zod methods are immutable, returning new schema instances. Metadata is associated with the *specific* schema instance it was applied to and is not automatically carried over to new instances created by subsequent method calls.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/metadata.mdx#_snippet_10 LANGUAGE: typescript
CODE:
```
const A = z.string().meta({ description: "A cool string" });
A.meta(); // => { hello: "true" } const B = A.refine(_ => true);
B.meta(); // => undefined
``` ---------------------------------------- TITLE: Validate ISO 8601 datetimes without timezone offsets using Zod
DESCRIPTION: Demonstrates the default `z.iso.datetime()` method for validating ISO 8601 formatted strings. By default, it does not allow timezone offsets or local (unqualified) datetimes, but supports arbitrary sub-second precision.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_21 LANGUAGE: ts
CODE:
```
const datetime = z.iso.datetime(); datetime.parse("2020-01-01T06:15:00Z"); // ✅
datetime.parse("2020-01-01T06:15:00.123Z"); // ✅
datetime.parse("2020-01-01T06:15:00.123456Z"); // ✅ (arbitrary precision)
datetime.parse("2020-01-01T06:15:00+02:00"); // ❌ (offsets not allowed)
datetime.parse("2020-01-01T06:15:00"); // ❌ (local not allowed)
``` ---------------------------------------- TITLE: Zod Schema Prefault vs. Default Value Handling
DESCRIPTION: Demonstrates the difference between `default` and `prefault` in Zod. `default` short-circuits parsing for `undefined` input, returning the default value directly. `prefault` parses the default value when input is `undefined`, allowing transformations to apply.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_122 LANGUAGE: TypeScript
CODE:
```
const schema = z.string().transform(val => val.length).default(0);
schema.parse(undefined); // => 0
``` LANGUAGE: TypeScript
CODE:
```
z.string().transform(val => val.length).prefault("tuna");
schema.parse(undefined); // => 4
``` ---------------------------------------- TITLE: Zod Customizing `z.stringbool()` Truthy/Falsy Values
DESCRIPTION: Shows how to customize the `z.stringbool()` API by providing specific arrays for `truthy` and `falsy` values. This allows developers to define their own set of strings that should be coerced to `true` or `false`, tailoring the coercion logic to application-specific requirements.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_33 LANGUAGE: ts
CODE:
```
z.stringbool({ truthy: ["yes", "true"], falsy: ["no", "false"]
})
``` ---------------------------------------- TITLE: Constrain precision of ISO 8601 datetimes with Zod
DESCRIPTION: Demonstrates how the `precision` parameter in `z.iso.datetime()` can be used to enforce specific levels of time precision (e.g., minute, second, millisecond). It shows examples for `-1` (minute), `0` (second), and `3` (millisecond) precision.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_24 LANGUAGE: ts
CODE:
```
const a = z.iso.datetime();
a.parse("2020-01-01T06:15Z"); // ✅
a.parse("2020-01-01T06:15:00Z"); // ✅
a.parse("2020-01-01T06:15:00.123Z"); // ✅ const b = z.iso.datetime({ precision: -1 }); // minute precision (no seconds)
b.parse("2020-01-01T06:15Z"); // ✅
b.parse("2020-01-01T06:15:00Z"); // ❌
b.parse("2020-01-01T06:15:00.123Z"); // ❌ const c = z.iso.datetime({ precision: 0 }); // second precision only
c.parse("2020-01-01T06:15Z"); // ❌
c.parse("2020-01-01T06:15:00Z"); // ✅
c.parse("2020-01-01T06:15:00.123Z"); // ❌ const d = z.iso.datetime({ precision: 3 }); // millisecond precision only
d.parse("2020-01-01T06:15Z"); // ❌
d.parse("2020-01-01T06:15:00Z"); // ❌
d.parse("2020-01-01T06:15:00.123Z"); // ✅
``` ---------------------------------------- TITLE: Constraining Zod Schema by Inferred Output Type
DESCRIPTION: Explains how to define a function that accepts a Zod schema whose inferred output type is constrained to a specific type, such as 'string'. This ensures that only schemas producing the desired output type are accepted.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/library-authors.mdx#_snippet_10 LANGUAGE: TypeScript
CODE:
```
import * as z4 from "zod/v4/core"; // only accepts string schemas
function inferSchema<T extends z4.$ZodType<string>>(schema: T) { return schema;
} inferSchema(z.string()); // ✅ inferSchema(z.number()); // ❌ The types of '_zod.output' are incompatible between these types. // // Type 'number' is not assignable to type 'string'
``` ---------------------------------------- TITLE: Validate Zod String Time Format
DESCRIPTION: The `z.string().time()` method validates strings against `HH:MM` or `HH:MM:SS[.s+]` formats, disallowing timezone offsets. The `precision` option can be used to constrain the allowable decimal precision for seconds.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_17 LANGUAGE: ts
CODE:
```
const time = z.string().time(); time.parse("00:00:00"); // pass
time.parse("09:52:31"); // pass
time.parse("09:52"); // pass
time.parse("23:59:59.9999999"); // pass (arbitrary precision) time.parse("00:00:00.123Z"); // fail (no `Z` allowed)
time.parse("00:00:00.123+02:00"); // fail (no offsets allowed)
``` LANGUAGE: ts
CODE:
```
const time = z.string().time({ precision: 3 }); time.parse("00:00:00.123"); // pass
time.parse("00:00:00.123456"); // fail
time.parse("00:00:00"); // fail
time.parse("00:00"); // fail
``` ---------------------------------------- TITLE: Zod Fixed-Width BigInt Formats
DESCRIPTION: Details the new `bigint` numeric formats for integer types that exceed JavaScript's safe `number` representation. These formats return `ZodBigInt` instances with appropriate minimum and maximum constraints, supporting 64-bit signed and unsigned integers.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_31 LANGUAGE: ts
CODE:
```
z.int64(); // [-9223372036854775808n, 9223372036854775807n]
z.uint64(); // [0n, 18446744073709551615n]
``` ---------------------------------------- TITLE: Convert Zod Object Schemas with Default 'additionalProperties'
DESCRIPTION: Explains that by default, `z.object()` schemas are converted to JSON Schema with `additionalProperties: false`, accurately reflecting Zod's behavior of stripping extra properties.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/json-schema.mdx#_snippet_6 LANGUAGE: TypeScript
CODE:
```
import { z } from "zod/v4"; const schema = z.object({ name: z.string(), age: z.number(),
}); z.toJSONSchema(schema)
// => {
// type: 'object',
// properties: { name: { type: 'string' }, age: { type: 'number' } },
// required: [ 'name', 'age' ],
// additionalProperties: false,
// }
``` ---------------------------------------- TITLE: Throw Error on Schema Cycles
DESCRIPTION: Demonstrates how to configure `z.toJSONSchema` to throw an error when a circular reference is encountered in the schema, instead of resolving it with `$ref`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/json-schema.mdx#_snippet_21 LANGUAGE: ts
CODE:
```
z.toJSONSchema(User, { cycles: "throw" });
// => throws Error
``` ---------------------------------------- TITLE: Zod `datetime()` Validation: Constraining Sub-second Precision
DESCRIPTION: Demonstrates how to enforce a specific sub-second precision for `z.string().datetime()` using the `precision` option. This allows developers to control the exact number of decimal places expected for seconds, rejecting strings that do not match the specified precision or have no sub-seconds.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_15 LANGUAGE: ts
CODE:
```
const datetime = z.string().datetime({ precision: 3 }); datetime.parse("2020-01-01T00:00:00.123Z"); // pass
datetime.parse("2020-01-01T00:00:00Z"); // fail
datetime.parse("2020-01-01T00:00Z"); // fail
datetime.parse("2020-01-01T00:00:00.123456Z"); // fail
``` ---------------------------------------- TITLE: Define and Parse a Zod Map Schema
DESCRIPTION: This snippet illustrates how to define a Zod schema for a `Map` object, specifying the types for its keys and values. It includes an example of creating a `Map` instance and then parsing it against the defined schema.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_97 LANGUAGE: ts
CODE:
```
const StringNumberMap = z.map(z.string(), z.number());
type StringNumberMap = z.infer<typeof StringNumberMap>; // Map<string, number> const myMap: StringNumberMap = new Map();
myMap.set("one", 1);
myMap.set("two", 2); StringNumberMap.parse(myMap);
``` ---------------------------------------- TITLE: Zod z.enum Pitfall with Variable Arrays
DESCRIPTION: Illustrates a common pitfall when using `z.enum` with a string array declared as a variable. Zod cannot infer exact values, leading to a `string` type inference instead of a literal union type.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_44 LANGUAGE: ts
CODE:
```
const fish = ["Salmon", "Tuna", "Trout"]; const FishEnum = z.enum(fish);
type FishEnum = z.infer<typeof FishEnum>; // string
``` ---------------------------------------- TITLE: Validate IPv4 addresses with Zod
DESCRIPTION: Demonstrates the `z.ipv4()` method for validating strings as IPv4 addresses.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_28 LANGUAGE: ts
CODE:
```
const ipv4 = z.ipv4();
ipv4.parse("192.168.0.0"); // ✅
``` ---------------------------------------- TITLE: Zod Enum Schema Accessing Values and Options
DESCRIPTION: Shows how to access individual enum values using the .enum property for autocompletion and how to retrieve the full list of options as a tuple using the .options property.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_33 LANGUAGE: ts
CODE:
```
FishEnum.enum.Salmon;
FishEnum.options; // ["Salmon", "Tuna", "Trout"];
``` ---------------------------------------- TITLE: Zod Fixed-Width Number Formats
DESCRIPTION: Introduces new numeric formats for representing fixed-width integer and float types, returning `ZodNumber` instances with predefined minimum and maximum constraints. This includes standard integers, 32-bit and 64-bit floats, and signed/unsigned 32-bit integers, ensuring type safety for specific numeric ranges.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_30 LANGUAGE: ts
CODE:
```
z.int(); // [Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER],
z.float32(); // [-3.4028234663852886e38, 3.4028234663852886e38]
z.float64(); // [-1.7976931348623157e308, 1.7976931348623157e308]
z.int32(); // [-2147483648, 2147483647]
z.uint32(); // [0, 4294967295]
``` ---------------------------------------- TITLE: Register Schemas Using Zod's .register() Method
DESCRIPTION: Illustrates the convenient `.register()` method on a schema to add it to a registry, noting that it returns the original schema.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_19 LANGUAGE: ts
CODE:
```
emailSchema.register(myRegistry, { title: "Email address", description: "..." })
// => returns emailSchema
``` ---------------------------------------- TITLE: Validate URL hostname against a specific regex using Zod
DESCRIPTION: Shows how to use the `hostname` option with `z.url()` to enforce a specific regular expression pattern for the URL's hostname. This allows for stricter validation beyond basic WHATWG compatibility.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_18 LANGUAGE: ts
CODE:
```
const schema = z.url({ hostname: /^example\.com$/ }); schema.parse("https://example.com"); // ✅
schema.parse("https://zombo.com"); // ❌
``` ---------------------------------------- TITLE: Define a Zod Partial Record Schema with Optional Enum Keys
DESCRIPTION: This example demonstrates `z.partialRecord()`, which creates a record schema where keys derived from an enum are optional. This is useful for replicating the non-exhaustive behavior of `z.record()` from Zod 3, allowing objects to have a subset of the defined enum keys.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_96 LANGUAGE: ts
CODE:
```
const Keys = z.enum(["id", "name", "email"]).or(z.never()); const Person = z.partialRecord(Keys, z.string());
// { id?: string; name?: string; email?: string }
``` ---------------------------------------- TITLE: Register Schema Metadata with Zod
DESCRIPTION: Illustrates how to use the `.meta()` or `.register()` methods to register a schema with `z.globalRegistry` in Zod, allowing metadata like title and description to be included in the generated JSON Schema.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/json-schema.mdx#_snippet_15 LANGUAGE: ts
CODE:
```
import { z } from "zod/v4"; // `.meta()` is a convenience method for registering a schema in `z.globalRegistry`
const emailSchema = z.string().meta({ title: "Email address", description: "Your email address",
}); z.toJSONSchema(emailSchema);
// => { type: "string", title: "Email address", description: "Your email address", ... }
``` LANGUAGE: ts
CODE:
```
import { z } from "zod/v4"; // `.meta()` is a convenience method for registering a schema in `z.globalRegistry`
const emailSchema = z.string().register(z.globalRegistry, { title: "Email address", description: "Your email address",
}); z.toJSONSchema(emailSchema);
// => { type: "string", title: "Email address", description: "Your email address", ... }
``` ---------------------------------------- TITLE: Incorrectly Inferring Zod Schema Type
DESCRIPTION: Illustrates an incorrect method for defining a function that accepts a Zod schema. This approach leads to a loss of specific type information, resulting in a generic '$ZodType' instead of the actual subclass (e.g., 'ZodString').
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/library-authors.mdx#_snippet_7 LANGUAGE: TypeScript
CODE:
```
import * as z4 from "zod/v4/core"; function inferSchema<T>(schema: z4.$ZodType<T>) { return schema;
} inferSchema(z.string());
// => $ZodType<string>
``` ---------------------------------------- TITLE: Extract Enum Values from Zod Schema
DESCRIPTION: Explains how to extract the schema's values as an enum-like object. Shows different approaches for Zod and Zod Mini versions to access the underlying enum values.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_47 LANGUAGE: ts
CODE:
```
const FishEnum = z.enum(["Salmon", "Tuna", "Trout"]); FishEnum.enum;
// => { Salmon: "Salmon", Tuna: "Tuna", Trout: "Trout" }
``` LANGUAGE: ts
CODE:
```
const FishEnum = z.enum(["Salmon", "Tuna", "Trout"]); FishEnum.def.entries;
// => { Salmon: "Salmon", Tuna: "Tuna", Trout: "Trout" }
``` ---------------------------------------- TITLE: Constrain Zod Set Schema Size with Min, Max, and Exact Methods
DESCRIPTION: This snippet demonstrates how to apply size constraints to a Zod set schema using `min()`, `max()`, and `size()` methods in standard Zod. These methods ensure the set contains a specific number of items or falls within a range.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_99 LANGUAGE: ts
CODE:
```
z.set(z.string()).min(5); // must contain 5 or more items
z.set(z.string()).max(5); // must contain 5 or fewer items
z.set(z.string()).size(5); // must contain 5 items exactly
``` LANGUAGE: ts
CODE:
```
z.set(z.string()).check(z.minSize(5)); // must contain 5 or more items
z.set(z.string()).check(z.maxSize(5)); // must contain 5 or fewer items
z.set(z.string()).check(z.size(5)); // must contain 5 items exactly
``` ---------------------------------------- TITLE: Apply Metadata using .meta() Method
DESCRIPTION: Illustrates the `.meta()` method as a convenient shorthand for registering a schema with `z.globalRegistry` and assigning multiple metadata properties directly to it.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/metadata.mdx#_snippet_8 LANGUAGE: typescript
CODE:
```
const emailSchema = z.email().meta({ id: "email_address", title: "Email address", description: "Please enter a valid email address"
});
``` LANGUAGE: typescript
CODE:
```
// no equivalent ``` ---------------------------------------- TITLE: Zod `datetime()` Validation: Allowing Local (Unqualified) Datetimes
DESCRIPTION: Illustrates how to use the `local` flag with `z.string().datetime()` to allow unqualified (timezone-less) datetime strings. This is useful for validating local time representations without explicit timezone information.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_14 LANGUAGE: ts
CODE:
```
const schema = z.string().datetime({ local: true });
schema.parse("2020-01-01T00:00:00"); // pass
schema.parse("2020-01-01T00:00"); // pass
``` ---------------------------------------- TITLE: Create ZodEnum from Object Keys
DESCRIPTION: Demonstrates how to generate a `ZodEnum` schema from the keys of an existing object schema. It shows using `.keyof()` for standard Zod and `z.keyof()` for Zod Mini.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_67 LANGUAGE: ts
CODE:
```
const keySchema = Dog.keyof();
// => ZodEnum<["name", "age"]>
``` LANGUAGE: zod/v4-mini
CODE:
```
const keySchema = z.keyof(Dog);
// => ZodEnum<["name", "age"]>
``` ---------------------------------------- TITLE: Create a Zod Schema for JSON-Encodable Values
DESCRIPTION: Demonstrates the use of `z.json()` to create a Zod schema that validates any JSON-encodable value.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_132 LANGUAGE: ts
CODE:
```
const jsonSchema = z.json();
``` ---------------------------------------- TITLE: Configure Zod Peer Dependency for Libraries
DESCRIPTION: Explains how to add Zod as a peer dependency in package.json for libraries built on top of Zod, ensuring users provide their own Zod installation. This is a fundamental setup step.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/library-authors.mdx#_snippet_0 LANGUAGE: json
CODE:
```
{ "peerDependencies": { "zod": "^3.25.0" }
}
``` ---------------------------------------- TITLE: Traversing Zod Schemas by Type
DESCRIPTION: This TypeScript function demonstrates how to traverse Zod schemas by casting them to `$ZodTypes` and using the `_zod.def.type` property within a switch statement to handle different schema types. This pattern is essential for building tools that need to inspect or generate code based on Zod schema definitions.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/core.mdx#_snippet_4 LANGUAGE: ts
CODE:
```
export function walk(_schema: z.$ZodType) { const schema = _schema as z.$ZodTypes; const def = schema._zod.def; switch (def.type) { case "string": { // ... break; } case "object": { // ... break; } }
}
``` ---------------------------------------- TITLE: Add Description to Zod Schema with .describe()
DESCRIPTION: The `.describe()` method allows adding a `description` property to a Zod schema. This is useful for documentation purposes, especially when generating JSON Schema using libraries like `zod-to-json-schema`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_101 LANGUAGE: ts
CODE:
```
const documentedString = z .string() .describe("A useful bit of text, if you know what to do with it.");
documentedString.description; // A useful bit of text…
``` ---------------------------------------- TITLE: Access Zod Object Schema Properties with .shape
DESCRIPTION: Explains how to use the `.shape` property to access the individual Zod schemas for each key within an object schema.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_42 LANGUAGE: typescript
CODE:
```
Dog.shape.name; // => string schema
Dog.shape.age; // => number schema
``` ---------------------------------------- TITLE: Define Zod Literal and Void Schemas
DESCRIPTION: Explains how to define schemas for specific literal values like strings, numbers, bigints, and booleans in Zod. Also covers `z.null()`, `z.undefined()`, and `z.void()` for JavaScript literals.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_4 LANGUAGE: ts
CODE:
```
const tuna = z.literal("tuna");
const twelve = z.literal(12);
const twobig = z.literal(2n);
const tru = z.literal(true); z.null();
z.undefined();
z.void(); // equivalent to z.undefined()
``` ---------------------------------------- TITLE: Define a Zod Record Schema with Union of String, Number, and Symbol Keys
DESCRIPTION: This example illustrates how to create a Zod record schema where the keys can be a union of string, number, or symbol types. It defines a `Keys` schema using `z.union` and then applies it to `z.record` with `z.unknown` values.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_94 LANGUAGE: ts
CODE:
```
const Keys = z.union([z.string(), z.number(), z.symbol()]);
const AnyObject = z.record(Keys, z.unknown());
// Record<string | number | symbol, unknown>
``` ---------------------------------------- TITLE: Zod: `z.preprocess` returns `ZodPipe`
DESCRIPTION: The `z.preprocess()` function now returns a `ZodPipe` instance instead of `ZodPreprocess`, aligning its behavior with `.transform()`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/changelog.mdx#_snippet_45 LANGUAGE: TypeScript
CODE:
```
z.preprocess(val => val, z.string()); // ZodPipe<ZodTransform, ZodString>
``` ---------------------------------------- TITLE: Available Zod Locales for Internationalization
DESCRIPTION: A comprehensive list of all supported locale codes available in Zod for internationalizing error messages. These locales can be loaded and configured to provide error messages in various languages.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/error-customization.mdx#_snippet_18 LANGUAGE: APIDOC
CODE:
```
Locales:
- ar — Arabic
- az — Azerbaijani
- be — Belarusian
- ca — Catalan
- cs — Czech
- de — German
- en — English
- es — Spanish
- fa — Farsi
- fi — Finnish
- fr — French
- frCA — Canadian French
- he — Hebrew
- hu — Hungarian
- id — Indonesian
- it — Italian
- ja — Japanese
- kh — Khmer
- ko — Korean
- mk — Macedonian
- ms — Malay
- nl — Dutch
- no — Norwegian
- ota — Türkî
- ps — Pashto
- pl — Polish
- pt — Portuguese
- ru — Russian
- sl — Slovenian
- sv — Swedish
- ta — Tamil
- th — Thai
- tr — Türkçe
- ua — Ukrainian
- ur — Urdu
- vi — Tiếng Việt
- zhCN — Simplified Chinese
- zhTW — Traditional Chinese
``` ---------------------------------------- TITLE: Understand JavaScript Numerical Object Keys
DESCRIPTION: Illustrates that despite TypeScript's ability to define numerical keys for objects, JavaScript runtime automatically casts all object keys to strings. This explains why Zod does not provide a direct way to define record schemas with numerical keys.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_68 LANGUAGE: JavaScript
CODE:
```
const testMap: { [k: number]: string } = { 1: "one",
}; for (const key in testMap) { console.log(`${key}: ${typeof key}`);
}
// prints: `1: string`
``` ---------------------------------------- TITLE: Using Zod String Format Checks as Types or Checks
DESCRIPTION: Illustrates the dual nature of some string format checks, demonstrating how they can be used directly as schema types (e.g., `z.email()`) or applied as checks to an existing schema (e.g., `z.string().check(z.email())`).
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/core.mdx#_snippet_13 LANGUAGE: ts
CODE:
```
// as a type
z.email().parse("user@example.com"); // as a check
z.string().check(z.email()).parse("user@example.com")
``` ---------------------------------------- TITLE: Import Zod 4 from Subpath
DESCRIPTION: TypeScript import statement to use Zod 4 by importing it from the `/v4` subpath.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_1 LANGUAGE: TypeScript
CODE:
```
import { z } from "zod/v4";
``` ---------------------------------------- TITLE: Zod 4: Using `z.tuple()` for Rest Arguments
DESCRIPTION: Provides the recommended approach for representing types like `[string, ...string[]]` using `z.tuple()` with a rest argument, aligning with TypeScript's type system.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/changelog.mdx#_snippet_27 LANGUAGE: typescript
CODE:
```
z.tuple([z.string()], z.string());
// => [string, ...string[]]
``` ---------------------------------------- TITLE: Upgrade Zod to Zod 4
DESCRIPTION: Command to upgrade the Zod package to version 3.25.0, which includes Zod 4.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/index.mdx#_snippet_0 LANGUAGE: Shell
CODE:
```
npm upgrade zod@^3.25.0
``` ---------------------------------------- TITLE: Convert Zod Numeric Types to JSON Schema
DESCRIPTION: Demonstrates how Zod's numeric types, including general numbers, floats, and integers, are converted to their respective JSON Schema types, with specific examples showing how `float32` and `int32` might include range constraints.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/json-schema.mdx#_snippet_5 LANGUAGE: TypeScript
CODE:
```
// number
z.number(); // => { type: "number" }
z.float32(); // => { type: "number", exclusiveMinimum: ..., exclusiveMaximum: ... }
z.float64(); // => { type: "number", exclusiveMinimum: ..., exclusiveMaximum: ... } // integer
z.int(); // => { type: "integer" }
z.int32(); // => { type: "integer", exclusiveMinimum: ..., exclusiveMaximum: ... }
``` ---------------------------------------- TITLE: ZodType with Input and Output Types for ZodEffects
DESCRIPTION: Explains how to correctly define `z.ZodType` when using ZodEffects like `.refine`, `.transform`, or `preprocess`. It shows how to specify distinct input and output types for recursive schemas that involve validation or transformation.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_74 LANGUAGE: ts
CODE:
```
const isValidId = (id: string): id is `${string}/${string}` => id.split("/").length === 2; const baseSchema = z.object({ id: z.string().refine(isValidId),
}); type Input = z.input<typeof baseSchema> & { children: Input[];
}; type Output = z.output<typeof baseSchema> & { children: Output[];
}; const schema: z.ZodType<Output, z.ZodTypeDef, Input> = baseSchema.extend({ children: z.lazy(() => schema.array()),
});
``` ---------------------------------------- TITLE: Zod 4: Updated `ZodType` Generics
DESCRIPTION: Zod 4 modifies the generic structure of `ZodType`, removing the `Def` generic and defaulting `Input` to `unknown` instead of `Output`. This change simplifies generic functions involving `ZodType` and allows for more intuitive type inference in various scenarios, eliminating the need for `z.ZodTypeAny`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/changelog.mdx#_snippet_41 LANGUAGE: ts
CODE:
```
// Zod 3
class ZodType<Output, Def extends z.ZodTypeDef, Input = Output> { // ...
}
``` LANGUAGE: ts
CODE:
```
// Zod 4
class ZodType<Output = unknown, Input = unknown> { // ...
}
``` LANGUAGE: ts
CODE:
```
function inferSchema<T extends z.ZodType>(schema: T): T { return schema;
}; inferSchema(z.string()); // z.ZodString
``` ---------------------------------------- TITLE: Implement a Zod Function Schema with Input/Output Validation
DESCRIPTION: This snippet demonstrates using the `.implement()` method on a Zod function schema to create a new function that automatically validates its inputs and outputs. TypeScript correctly infers the argument type within the implementation, ensuring type safety and runtime validation.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_80 LANGUAGE: ts
CODE:
```
const trimmedLength = z .function() .args(z.string()) // accepts an arbitrary number of arguments .returns(z.number()) .implement((x) => { // TypeScript knows x is a string! return x.trim().length; }); trimmedLength("sandwich"); // => 8
trimmedLength(" asdf "); // => 4
``` ---------------------------------------- TITLE: Intersect Primitive Zod Schemas
DESCRIPTION: Illustrates the use of `z.intersection()` to combine two Zod schemas that represent primitive types. In this example, intersecting a union of number/string with a union of number/boolean results in a schema that infers to `number`, demonstrating the logical AND behavior.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/api.mdx#_snippet_91 LANGUAGE: ts
CODE:
```
const a = z.union([z.number(), z.string()]);
const b = z.union([z.number(), z.boolean()]);
const c = z.intersection(a, b); type c = z.infer<typeof c>; // => number
``` ---------------------------------------- TITLE: Replacing Zod .cidr() with .cidrv4() and .cidrv6()
DESCRIPTION: Similar to IP validation, z.string().cidr() is replaced by z.cidrv4() and z.cidrv6(). Combine them with z.union() if both CIDR types are needed.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/changelog.mdx#_snippet_18 LANGUAGE: TypeScript
CODE:
```
z.string().cidr() // ❌
z.cidrv4() // ✅
z.cidrv6() // ✅
``` ---------------------------------------- TITLE: Convert Zod File Schemas with Size and MIME Type Checks
DESCRIPTION: Illustrates how Zod file schemas with size (`min`, `max`) and MIME type (`mimeType`) checks are translated into JSON Schema properties like `minLength`, `maxLength`, and `contentMediaType`.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/json-schema.mdx#_snippet_9 LANGUAGE: TypeScript
CODE:
```
z.file().min(1).max(1024 * 1024).mimeType("image/png");
// => {
// type: "string",
// format: "binary",
// contentEncoding: "binary",
// contentMediaType: "image/png",
// minLength: 1,
// maxLength: 1048576,
// }
``` ---------------------------------------- TITLE: Zod 4: Defining Async Functions with `implementAsync()`
DESCRIPTION: Shows how to define an asynchronous function using the new `implementAsync()` method for `z.function()` in Zod 4.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/changelog.mdx#_snippet_29 LANGUAGE: typescript
CODE:
```
myFunction.implementAsync(async (input) => { return `Hello ${input.name}, you are ${input.age} years old.`;
});
``` ---------------------------------------- TITLE: Zod Tuple Schema: Adding Variadic Arguments with .rest()
DESCRIPTION: The `.rest()` method can be used with Zod tuples to add a variadic, or 'rest', argument. This allows the tuple to accept an arbitrary number of additional elements, all validated against the specified rest schema, after its initial fixed elements.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_58 LANGUAGE: ts
CODE:
```
const variadicTuple = z.tuple([z.string()]).rest(z.number());
const result = variadicTuple.parse(["hello", 1, 2, 3]);
// => [string, ...number[]];
``` ---------------------------------------- TITLE: Defining Schemas (Zod Mini vs Standard Zod)
DESCRIPTION: Compare how schemas are defined in Zod Mini using functional composition versus the standard Zod using method chaining. Zod Mini favors functions for better tree-shaking.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/mini.mdx#_snippet_1 LANGUAGE: ts
CODE:
```
import { z } from "zod/v4-mini" const mySchema = z.nullable(z.optional(z.string()));
``` LANGUAGE: ts
CODE:
```
import { z } from "zod/v4"; const mySchema = z.string().optional().nullable();
``` ---------------------------------------- TITLE: Zod 4: Introduction of `z.core` Sub-package
DESCRIPTION: Zod 4 introduces the `zod/v4/core` sub-package, centralizing utility functions and types to facilitate code sharing between different Zod versions. Its contents are also re-exported under the `z.core` namespace for convenience, allowing users to access core functionalities directly from the main `z` import.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/v4/changelog.mdx#_snippet_42 LANGUAGE: ts
CODE:
```
import { z } from "zod/v4/core"; function handleError(iss: z.$ZodError) { // do stuff
}
``` LANGUAGE: ts
CODE:
```
import { z } from "zod/v4"; function handleError(iss: z.core.$ZodError) { // do stuff
}
``` ---------------------------------------- TITLE: Access Options of Zod Discriminated Union
DESCRIPTION: Shows how to retrieve the array of schemas (options) that constitute a discriminated union using the `.options` property. This can be useful for introspection or dynamic schema manipulation.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_64 LANGUAGE: TypeScript
CODE:
```
myUnion.options; // [ZodObject<...>, ZodObject<...>]
``` ---------------------------------------- TITLE: Zod Tuple Schema: Defining Fixed-Length Tuples
DESCRIPTION: Unlike arrays, Zod tuples allow you to define a fixed number of elements, where each element can have a distinct type. This provides strong type safety for ordered collections of mixed types.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_57 LANGUAGE: ts
CODE:
```
const athleteSchema = z.tuple([ z.string(), // name z.number(), // jersey number z.object({ pointsScored: z.number(), }), // statistics
]); type Athlete = z.infer<typeof athleteSchema>;
// type Athlete = [string, number, { pointsScored: number }]
``` ---------------------------------------- TITLE: Incorrect Generic Function for Zod Schema Input
DESCRIPTION: Attempting to write a generic function for Zod schemas using `z.ZodType<T>` is incorrect. This approach causes TypeScript to lose specific subclass information, preventing access to schema-specific methods like `.min()` on the returned schema.
SOURCE: https://github.com/colinhacks/zod/blob/main/packages/docs/content/packages/v3.mdx#_snippet_115 LANGUAGE: ts
CODE:
```
function inferSchema<T>(schema: z.ZodType<T>) { return schema;
} inferSchema(z.string());
// => ZodType<string>
```