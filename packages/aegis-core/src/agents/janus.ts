import { StateGraph, END, START, Annotation } from "@langchain/langgraph";
import { BaseMessage } from "@langchain/core/messages";

// Define the state for our Janus agent
const JanusState = Annotation.Root({
  // The input from the human operator
  input: Annotation<string>(),
  // The multi-step plan generated by the planner
  plan: Annotation<string[]>({
    reducer: (x, y) => y, // Overwrite plan with new plan
    default: () => [],
  }),
  // The history of past steps taken
  pastSteps: Annotation<Array<[string, string]>>({
    reducer: (x, y) => x.concat(y),
    default: () => [],
  }),
  // The final response to the user
  response: Annotation<string>(),
});

// This is a placeholder for the planning logic
async function planStep(state: typeof JanusState.State) {
  console.log("---JANUS: PLANNING STEP---");
  console.log("Objective:", state.input);
  // In the future, this will call an LLM to generate a plan.
  // For now, we'll use a dummy plan.
  const plan = [
    "Step 1: Delegate to Lyra to find a product.",
    "Step 2: Delegate to Fornax to list the product.",
    "Step 3: Report completion to the user.",
  ];
  return { plan };
}

// This is a placeholder for executing a single step of the plan
async function executeStep(state: typeof JanusState.State) {
  console.log("---JANUS: EXECUTING STEP---");
  if (state.plan.length === 0) {
    return { response: "No plan to execute." };
  }
  const currentStep = state.plan[0];
  console.log("Executing:", currentStep);
  // In the future, this will delegate to other agents (Lyra, Fornax, etc.)
  const result = `Successfully executed: ${currentStep}`;
  return {
    pastSteps: [[currentStep, result]],
    plan: state.plan.slice(1),
  };
}

// This function determines whether to continue executing the plan or end
function shouldEnd(state: typeof JanusState.State): "continue" | "end" {
  console.log("---JANUS: CHECKING IF FINISHED---");
  if (state.plan.length === 0) {
    console.log("Plan complete. Ending execution.");
    return "end";
  }
  return "continue";
}

// Define the graph workflow
const workflow = new StateGraph(JanusState);

// Add the nodes to the graph
workflow.addNode("planner", planStep);
workflow.addNode("agent", executeStep);

// Define the edges for the graph
workflow.addEdge(START, "planner" as any);
workflow.addEdge("planner" as any, "agent" as any);
workflow.addConditionalEdges("agent" as any, shouldEnd, {
  continue: "agent" as any,
  end: END,
});

// Compile the graph into a runnable app
const app = workflow.compile();

console.log("Janus agent graph compiled successfully.");

// We will export the app and state for use in the main server later.
export { app, JanusState };
